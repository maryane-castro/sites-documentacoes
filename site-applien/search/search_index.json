{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NUVEN - IA APPLIEN","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o do projeto IA APPLIEN.</p>"},{"location":"#sobre-o-repositorio","title":"\ud83d\udcda Sobre o Reposit\u00f3rio","text":"<p>Este reposit\u00f3rio cont\u00e9m o c\u00f3digo da Prova de Conceito (POC) do IA APPLIEN. Aqui voc\u00ea encontrar\u00e1 todas as informa\u00e7\u00f5es necess\u00e1rias para configurar e utilizar o projeto.</p>"},{"location":"#pre-requisitos","title":"\ud83c\udfb2 Pr\u00e9-Requisitos","text":"<p>Antes de come\u00e7ar, verifique se voc\u00ea atende aos seguintes pr\u00e9-requisitos:</p> <ul> <li>Gerenciador de ambientes Conda instalado.</li> <li>CUDA Toolkit 11.8 ou superior instalado (caso o ambiente rode em GPU).</li> <li>Gerenciador de pacotes <code>pip</code> instalado.</li> </ul>"},{"location":"#instalacao","title":"\ud83d\udcbf Instala\u00e7\u00e3o","text":"<p>Siga as etapas abaixo para configurar o ambiente de desenvolvimento:</p>"},{"location":"#1-clone-o-repositorio","title":"1. Clone o reposit\u00f3rio","text":"<p>Clone este reposit\u00f3rio para o seu sistema local:</p> <pre><code>git clone https://github.com/nuven-applien/applien-ia.git\n</code></pre>"},{"location":"#2-crie-um-ambiente-via-conda","title":"2. Crie um ambiente via <code>conda</code>","text":"<p>Crie um ambiente Python 3.10.0 com o Conda:</p> <pre><code>conda create -n IAPPLIEN python=3.10.0\n</code></pre>"},{"location":"#3-instale-as-dependencias-do-projeto","title":"3. Instale as depend\u00eancias do projeto","text":"<p>Ative o ambiente criado e instale as depend\u00eancias:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"#estrutura-do-projeto","title":"Estrutura do projeto","text":"<pre><code>\u251c\u2500\u2500 artefatos\n\u2502   \u251c\u2500\u2500 base-dados-aleat\u00f3ria-alternativas.json\n\u2502   \u251c\u2500\u2500 cartas.json\n\u2502   \u251c\u2500\u2500 cartas_transformadas_fibonacci.json\n\u2502   \u251c\u2500\u2500 df_deteccao_anomalia.json\n\u2502   \u2514\u2500\u2500 df_subgrupos.json\n\u251c\u2500\u2500 artefatos_usuario\n\u2502   \u2514\u2500\u2500 cartoes_selecionados_usuario.json\n\u251c\u2500\u2500 assets\n\u2502   \u2514\u2500\u2500 logo.png\n\u251c\u2500\u2500 help.txt\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 model\n\u2502   \u251c\u2500\u2500 modeloCbow.py\n\u2502   \u2514\u2500\u2500 __pycache__\n\u2502       \u2514\u2500\u2500 modeloCbow.cpython-39.pyc\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 Recomendar_Cartas\n\u2502   \u251c\u2500\u2500 analise_Sentimento_LLAMA\n\u2502   \u2502   \u2514\u2500\u2500 Analise_Sentimento_LLAMA.py\n\u2502   \u251c\u2500\u2500 detectar_Anomalia\n\u2502   \u2502   \u251c\u2500\u2500 Detectar_Anomalia.py\n\u2502   \u2502   \u2514\u2500\u2500 __pycache__\n\u2502   \u2502       \u2514\u2500\u2500 Detectar_Anomalia.cpython-39.pyc\n\u2502   \u251c\u2500\u2500 funcao_Recomendar_Cartas.py\n\u2502   \u251c\u2500\u2500 mainRecomendar_Cartas.py\n\u2502   \u2514\u2500\u2500 sistema_Recomendacao\n\u2502       \u251c\u2500\u2500 __pycache__\n\u2502       \u2502   \u251c\u2500\u2500 Recomendar_Carta.cpython-39.pyc\n\u2502       \u2502   \u2514\u2500\u2500 Sistema_Recomendacao.cpython-39.pyc\n\u2502       \u2514\u2500\u2500 Sistema_Recomendacao.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 Selecionar_Cartas_do_Usuario\n\u2502   \u251c\u2500\u2500 mainSelecionar_Cartas.py\n\u2502   \u251c\u2500\u2500 __pycache__\n\u2502   \u2502   \u2514\u2500\u2500 Selecionar_Cartas.cpython-39.pyc\n\u2502   \u2514\u2500\u2500 Selecionar_Cartas.py\n\u251c\u2500\u2500 Sugerir_Primeiras_Cartas\n\u2502   \u251c\u2500\u2500 mainSugerir_Primeiras_Cartas.py\n\u2502   \u251c\u2500\u2500 Pular_Primeiras_Cartas.py\n\u2502   \u251c\u2500\u2500 __pycache__\n\u2502   \u2502   \u251c\u2500\u2500 Pular_Primeiras_Carta.cpython-39.pyc\n\u2502   \u2502   \u2514\u2500\u2500 Sugerir_Primeira_Carta.cpython-39.pyc\n\u2502   \u2514\u2500\u2500 Sugerir_Primeira_Carta.py\n\u2514\u2500\u2500 utils\n    \u251c\u2500\u2500 caixaDeFerramentas.py\n    \u251c\u2500\u2500 carregarJson.py\n    \u251c\u2500\u2500 preProcessamento.py\n    \u251c\u2500\u2500 __pycache__\n    \u2502   \u251c\u2500\u2500 caixaDeFerramentas.cpython-39.pyc\n    \u2502   \u251c\u2500\u2500 carregarJson.cpython-39.pyc\n    \u2502   \u251c\u2500\u2500 preProcessamento.cpython-39.pyc\n    \u2502   \u251c\u2500\u2500 removerAlternativas.cpython-39.pyc\n    \u2502   \u2514\u2500\u2500 sistemaSemantico.cpython-39.pyc\n    \u251c\u2500\u2500 removerAlternativas.py\n    \u2514\u2500\u2500 sistemaSemantico.py\n</code></pre>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/","title":"Analisador de Sentimentos","text":""},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O m\u00f3dulo <code>SentimentAnalyzer</code> \u00e9 uma ferramenta projetada para analisar sentimentos em respostas de usu\u00e1rios, utilizando um modelo de linguagem (LLM) para processar o texto e gerar uma an\u00e1lise de sentimento. Este m\u00f3dulo \u00e9 capaz de interpretar respostas textuais, converter a an\u00e1lise em um formato estruturado (JSON) e visualizar a intensidade do sentimento ao longo do tempo atrav\u00e9s de um gr\u00e1fico.</p>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<pre><code>- `sentiment_analyzer.py`: Cont\u00e9m a implementa\u00e7\u00e3o da classe SentimentAnalyzer.\n</code></pre>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#uso","title":"Uso","text":"<p>Para utilizar o m\u00f3dulo, \u00e9 necess\u00e1rio instanciar a classe <code>SentimentAnalyzer</code> e chamar o m\u00e9todo <code>main</code> com as respostas do usu\u00e1rio e o n\u00famero de dias de inatividade.</p>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#exemplo","title":"Exemplo","text":"<pre><code>from sentiment_analyzer import SentimentAnalyzer\n\nanalyzer = SentimentAnalyzer()\n\nresposta1 = \"Estou me sentindo bem hoje.\"\nresposta2 = \"O trabalho tem sido desafiador, mas gratificante.\"\nresposta3 = \"Estou ansioso para as f\u00e9rias do pr\u00f3ximo m\u00eas.\"\ndias_inatividade = 5\n\ntemp_file_name, json_result = analyzer.main(resposta1, resposta2, resposta3, dias_inatividade)\n\nprint(f\"Arquivo do gr\u00e1fico: {temp_file_name}\")\nprint(f\"Resultado JSON:\\n{json_result}\")\n</code></pre>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#funcoes-e-classes-principais","title":"Fun\u00e7\u00f5es e Classes Principais","text":""},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#sentimentanalyzer","title":"<code>SentimentAnalyzer</code>","text":""},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#__init__model_namellama31-temperature0001","title":"<code>__init__(model_name=\"llama3.1\", temperature=0.001)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Inicializa a classe SentimentAnalyzer com um modelo de linguagem espec\u00edfico.</li> <li>Par\u00e2metros:</li> <li><code>model_name</code>: Nome do modelo Ollama a ser utilizado (padr\u00e3o: \"llama3.1\").</li> <li><code>temperature</code>: Temperatura para gera\u00e7\u00e3o de texto (padr\u00e3o: 0.001).</li> </ul>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#process_jsonresposta","title":"<code>process_json(resposta)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Processa a resposta do modelo LLM e converte em um dicion\u00e1rio JSON estruturado.</li> <li>Par\u00e2metros:</li> <li><code>resposta</code>: String contendo a resposta do modelo LLM.</li> <li>Retorno: Uma tupla contendo o dicion\u00e1rio JSON processado e sua representa\u00e7\u00e3o em string.</li> </ul>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#gerar_respostauser_input-prompt","title":"<code>gerar_resposta(user_input, prompt)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Gera uma resposta usando o modelo LLM com base nas entradas do usu\u00e1rio.</li> <li>Par\u00e2metros:</li> <li><code>user_input</code>: Tupla contendo as respostas do usu\u00e1rio e dias de inatividade.</li> <li><code>prompt</code>: Template de prompt para o modelo LLM.</li> <li>Retorno: A resposta gerada pelo modelo LLM.</li> </ul>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#gerar_graficodata","title":"<code>gerar_grafico(data)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Gera um gr\u00e1fico de linha suave mostrando a intensidade do sentimento ao longo do tempo.</li> <li>Par\u00e2metros:</li> <li><code>data</code>: Dicion\u00e1rio contendo os dados de sentimento.</li> <li>Retorno: Nome do arquivo tempor\u00e1rio onde o gr\u00e1fico foi salvo.</li> </ul>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#mainresposta1-resposta2-resposta3-dias_inatividade","title":"<code>main(resposta1, resposta2, resposta3, dias_inatividade)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: M\u00e9todo principal que orquestra o processo de an\u00e1lise de sentimento.</li> <li>Par\u00e2metros:</li> <li><code>resposta1</code>, <code>resposta2</code>, <code>resposta3</code>: Strings contendo as respostas do usu\u00e1rio.</li> <li><code>dias_inatividade</code>: N\u00famero de dias de inatividade.</li> <li>Retorno: Uma tupla contendo o nome do arquivo do gr\u00e1fico e a representa\u00e7\u00e3o JSON do resultado.</li> </ul>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#dependencias","title":"Depend\u00eancias","text":"<p>O m\u00f3dulo requer as seguintes bibliotecas:</p> <ul> <li>langchain_community</li> <li>matplotlib</li> <li>sklearn</li> <li>scipy</li> <li>numpy</li> </ul> <p>Certifique-se de instal\u00e1-las antes de usar o m\u00f3dulo.</p>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#notas-adicionais","title":"Notas Adicionais","text":"<ul> <li>O m\u00f3dulo utiliza o Ollama como modelo de linguagem, assegure-se de que ele esteja corretamente configurado em seu ambiente.</li> <li>O gr\u00e1fico gerado \u00e9 salvo temporariamente e o caminho do arquivo \u00e9 retornado. Lembre-se de gerenciar adequadamente esses arquivos tempor\u00e1rios em sua aplica\u00e7\u00e3o.</li> <li>A an\u00e1lise de sentimento considera valores negativos para sentimentos negativos, o que \u00e9 refletido no gr\u00e1fico gerado.</li> </ul>"},{"location":"pipeline/RecomendarCartas/CaixaDeFerramentas/","title":"Caixa de Ferramentas","text":""},{"location":"pipeline/RecomendarCartas/CaixaDeFerramentas/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>A classe <code>CaixaDeFerramentas</code> fornece utilit\u00e1rios que facilitam opera\u00e7\u00f5es auxiliares, como manipula\u00e7\u00e3o de sequ\u00eancias num\u00e9ricas e algoritmos de apoio que podem ser \u00fateis para a implementa\u00e7\u00e3o de sistemas sem\u00e2nticos e de recomenda\u00e7\u00e3o. A classe tamb\u00e9m oferece fun\u00e7\u00f5es matem\u00e1ticas e de processamento que servem como suporte ao sistema geral.</p>"},{"location":"pipeline/RecomendarCartas/CaixaDeFerramentas/#classe-caixadeferramentas","title":"Classe <code>CaixaDeFerramentas</code>","text":""},{"location":"pipeline/RecomendarCartas/CaixaDeFerramentas/#estrutura-da-classe","title":"Estrutura da Classe","text":"<p>A classe <code>CaixaDeFerramentas</code> possui m\u00e9todos que lidam com manipula\u00e7\u00f5es de sequ\u00eancias de Fibonacci e escolhas din\u00e2micas baseadas em par\u00e2metros fornecidos. Ela interage diretamente com outras classes como o <code>SistemaSemantico</code>.</p>"},{"location":"pipeline/RecomendarCartas/CaixaDeFerramentas/#assinatura-da-classe","title":"Assinatura da Classe","text":"<pre><code>class CaixaDeFerramentas:\n    def __init__(self, modelo_semantico):\n</code></pre>"},{"location":"pipeline/RecomendarCartas/CaixaDeFerramentas/#parametros","title":"Par\u00e2metros","text":"<ul> <li><code>modelo_semantico</code>: Uma inst\u00e2ncia da classe <code>SistemaSemantico</code> que ser\u00e1 utilizada pela caixa de ferramentas para interagir com o modelo sem\u00e2ntico, quando necess\u00e1rio.</li> </ul>"},{"location":"pipeline/RecomendarCartas/CaixaDeFerramentas/#metodos","title":"M\u00e9todos","text":""},{"location":"pipeline/RecomendarCartas/CaixaDeFerramentas/#proximo_fibonaccilista_fib","title":"<code>proximo_fibonacci(lista_fib)</code>","text":"<p>Este m\u00e9todo calcula e retorna o pr\u00f3ximo n\u00famero na sequ\u00eancia de Fibonacci com base em uma lista de n\u00fameros Fibonacci fornecida.</p> <p>Par\u00e2metros: - <code>lista_fib</code> (list): Uma lista de inteiros representando a sequ\u00eancia de Fibonacci atual.</p> <p>Retorno: - <code>int</code>: O pr\u00f3ximo n\u00famero da sequ\u00eancia de Fibonacci.</p> <p>Exemplo de uso:</p> <pre><code>caixa_ferramentas = CaixaDeFerramentas(modelo_semantico)\nproximo_numero = caixa_ferramentas.proximo_fibonacci([1, 1, 2, 3, 5])\nprint(proximo_numero)  # Sa\u00edda: 8\n</code></pre>"},{"location":"pipeline/RecomendarCartas/CaixaDeFerramentas/#probcc-cartas_visitadas-lista_fibonacci-alfa","title":"<code>probc(c, cartas_visitadas, lista_fibonacci, alfa)</code>","text":"<p>A fun\u00e7\u00e3o <code>probc</code> \u00e9 respons\u00e1vel por calcular uma probabilidade ajustada associada a uma carta espec\u00edfica, levando em considera\u00e7\u00e3o as cartas j\u00e1 visitadas, valores de Fibonacci correspondentes e um fator de ajuste alfa.</p> <p>Defini\u00e7\u00e3o da Fun\u00e7\u00e3o</p> <pre><code>def probc(self, c, cartas_visitadas: list, lista_fibonacci: list, alfa: float) -&gt; float:\n</code></pre> <p>Par\u00e2metros</p> <ul> <li><code>self</code>: Refer\u00eancia \u00e0 inst\u00e2ncia da classe. Necess\u00e1rio se a fun\u00e7\u00e3o estiver dentro de um m\u00e9todo de classe.</li> <li><code>c</code>: (Tipo: qualquer) A carta cuja probabilidade ser\u00e1 verificada.</li> <li><code>cartas_visitadas</code> (Tipo: <code>list</code>): Uma lista contendo as cartas que j\u00e1 foram visitadas.</li> <li><code>lista_fibonacci</code> (Tipo: <code>list</code>): Uma lista de valores de Fibonacci que est\u00e3o associados \u00e0s cartas visitadas.</li> <li><code>alfa</code> (Tipo: <code>float</code>): Um fator de ajuste que influencia o c\u00e1lculo da probabilidade.</li> </ul> <p>Retorno</p> <ul> <li>Tipo: <code>float</code> </li> <li>Descri\u00e7\u00e3o: Retorna a probabilidade ajustada para a carta <code>c</code>, considerando o fator alfa e o valor de Fibonacci associado. Se <code>c</code> n\u00e3o estiver presente na lista <code>cartas_visitadas</code>, a fun\u00e7\u00e3o retorna 1.</li> </ul> <p>L\u00f3gica da Fun\u00e7\u00e3o</p> <ol> <li>Verifica\u00e7\u00e3o de Presen\u00e7a:</li> <li>A fun\u00e7\u00e3o primeiro verifica se a carta <code>c</code> est\u00e1 presente na lista <code>cartas_visitadas</code>.</li> <li> <p>Se n\u00e3o estiver, a probabilidade \u00e9 considerada como <code>1</code>, indicando que a carta \u00e9 nova ou n\u00e3o foi visitada antes.</p> </li> <li> <p>C\u00e1lculo da Probabilidade:</p> </li> <li>Se <code>c</code> j\u00e1 foi visitada, a fun\u00e7\u00e3o encontra a posi\u00e7\u00e3o da carta na lista <code>cartas_visitadas</code> usando <code>index(c)</code>.</li> <li>Em seguida, utiliza essa posi\u00e7\u00e3o para buscar o valor correspondente de Fibonacci na <code>lista_fibonacci</code>.</li> <li> <p>A probabilidade \u00e9 calculada com a f\u00f3rmula:      [      \\text{probabilidade_atual} = \\frac{1}{1 + \\alpha \\cdot \\text{valor_fib}}      ]</p> </li> <li> <p>Retorno da Probabilidade:</p> </li> <li>A fun\u00e7\u00e3o retorna o valor calculado de <code>probabilidade_atual</code>.</li> </ol> <p>Exemplo de Uso</p> <pre><code>cartas_visitadas = ['A', 'K', 'Q']\nlista_fibonacci = [1, 1, 2]\nalfa = 0.5\ncarta = 'K'\n\nprobabilidade = self.probc(carta, cartas_visitadas, lista_fibonacci, alfa)\nprint(probabilidade)  # Sa\u00edda: 0.3333333333333333\n</code></pre>"},{"location":"pipeline/RecomendarCartas/CaixaDeFerramentas/#f_custocarta_atual","title":"<code>f_custo(carta_atual)</code>","text":"<p>A fun\u00e7\u00e3o <code>f_custo</code> \u00e9 uma parte cr\u00edtica do sistema de recomenda\u00e7\u00e3o de cartas. Ela calcula o \"custo\" ou a relev\u00e2ncia de uma carta atual com base em tr\u00eas crit\u00e9rios principais: probabilidade, similaridade com o \"Caderno de Ouro\" e a similaridade com a justificativa do usu\u00e1rio. Este custo \u00e9 utilizado para priorizar ou classificar cartas em um sistema de recomenda\u00e7\u00e3o, ajudando a determinar qual carta deve ser recomendada ao usu\u00e1rio a seguir.</p> <p>Assinatura da Fun\u00e7\u00e3o</p> <pre><code>def f_custo(self, carta_atual: str, cartas_visitadas: list, valores_fibonacci: list, alfa: float, peso_probabilidade: float, peso_similaridade_exp: float, peso_similaridade_just: float, caderno_de_ouro: str, justificativa_usuario: str) -&gt; float:\n</code></pre> <p>Par\u00e2metros</p> <ul> <li><code>carta_atual (str)</code>: A carta atual que est\u00e1 sendo avaliada.</li> <li><code>cartas_visitadas (list)</code>: Lista das cartas que j\u00e1 foram visitadas ou interagidas pelo usu\u00e1rio anteriormente.</li> <li><code>valores_fibonacci (list)</code>: Valores da sequ\u00eancia de Fibonacci associados \u00e0s cartas visitadas. Estes valores ajudam a modular a probabilidade da pr\u00f3xima carta recomendada.</li> <li><code>alfa (float)</code>: Par\u00e2metro de ajuste para influenciar o c\u00e1lculo da probabilidade. Esse valor ajuda a ponderar a import\u00e2ncia do hist\u00f3rico de intera\u00e7\u00f5es passadas do usu\u00e1rio.</li> <li><code>peso_probabilidade (float)</code>: Peso que define a import\u00e2ncia relativa da probabilidade no c\u00e1lculo do custo final da carta.</li> <li><code>peso_similaridade_exp (float)</code>: Peso atribu\u00eddo \u00e0 similaridade da carta com o \"Caderno de Ouro\". O \"Caderno de Ouro\" \u00e9 uma esp\u00e9cie de refer\u00eancia ou modelo ideal de carta.</li> <li><code>peso_similaridade_just (float)</code>: Peso atribu\u00eddo \u00e0 similaridade da carta com a justificativa fornecida pelo usu\u00e1rio. Este par\u00e2metro ajusta a recomenda\u00e7\u00e3o com base nos desejos ou prefer\u00eancias expl\u00edcitas do usu\u00e1rio.</li> <li><code>caderno_de_ouro (str)</code>: Texto base do Caderno de Ouro, utilizado para compara\u00e7\u00e3o de similaridade sem\u00e2ntica.</li> <li><code>justificativa_usuario (str)</code>: Justificativa fornecida pelo usu\u00e1rio, utilizada para ajustar as recomenda\u00e7\u00f5es com base em suas prefer\u00eancias ou feedback.</li> </ul> <p>Retorno</p> <ul> <li><code>float</code>: Retorna o custo calculado da carta atual. Este valor ser\u00e1 utilizado para ranquear ou selecionar a carta a ser recomendada ao usu\u00e1rio. A fun\u00e7\u00e3o tamb\u00e9m retorna a pr\u00f3pria carta (<code>carta_atual</code>), facilitando a correspond\u00eancia entre o custo e a carta em si.</li> </ul> <p>Explica\u00e7\u00e3o do C\u00e1lculo</p> <p>A fun\u00e7\u00e3o calcula o custo da carta com base em tr\u00eas componentes principais:</p> <ol> <li>Probabilidade:</li> <li>\u00c9 calculada pela fun\u00e7\u00e3o <code>self.probc</code>, que leva em considera\u00e7\u00e3o as cartas j\u00e1 visitadas, os valores de Fibonacci associados a elas e o par\u00e2metro <code>alfa</code> que ajusta o peso do hist\u00f3rico nas recomenda\u00e7\u00f5es futuras.</li> <li> <p>Esse valor \u00e9 multiplicado pelo <code>peso_probabilidade</code>, refletindo a import\u00e2ncia dessa m\u00e9trica no custo final.</p> </li> <li> <p>Similaridade com o Caderno de Ouro:</p> </li> <li>Utiliza a fun\u00e7\u00e3o <code>similaridade_cosseno_textos</code> para calcular a similaridade entre a carta atual e o Caderno de Ouro.</li> <li> <p>Multiplicado pelo <code>peso_similaridade_exp</code>, este componente mede o quanto a carta se alinha com o ideal definido pelo sistema.</p> </li> <li> <p>Similaridade com a Justificativa do Usu\u00e1rio:</p> </li> <li>Tamb\u00e9m utilizando <code>similaridade_cosseno_textos</code>, esta m\u00e9trica calcula o qu\u00e3o bem a carta atual reflete os desejos e prefer\u00eancias expressos pelo usu\u00e1rio em sua justificativa.</li> <li>O resultado \u00e9 ponderado pelo <code>peso_similaridade_just</code>.</li> </ol> <p>O custo final \u00e9 a soma ponderada dessas tr\u00eas componentes, refletindo um balanceamento entre probabilidade, similaridade com o modelo ideal e prefer\u00eancias do usu\u00e1rio.</p> <p>Exemplo de Aplica\u00e7\u00e3o</p> <pre><code>custo = self.f_custo(\n    carta_atual=\"Carta A\",\n    cartas_visitadas=[\"Carta B\", \"Carta C\"],\n    valores_fibonacci=[1, 2, 3],\n    alfa=0.5,\n    peso_probabilidade=0.4,\n    peso_similaridade_exp=0.3,\n    peso_similaridade_just=0.3,\n    caderno_de_ouro=\"Texto ideal de refer\u00eancia\",\n    justificativa_usuario=\"Prefer\u00eancia do usu\u00e1rio para esta recomenda\u00e7\u00e3o\"\n)\n\nprint(f\"Custo da Carta A: {custo[1]}\")\n</code></pre>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/","title":"Detec\u00e7\u00e3o Anomalia","text":""},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O m\u00f3dulo <code>DeteccaoAnomaliaSentimento</code> \u00e9 projetado para detectar anomalias em sentimentos baseados em cartas, utilizando palavras-chave e um modelo CBOW (Continuous Bag of Words) para calcular a similaridade entre palavras. A motiva\u00e7\u00e3o para a cria\u00e7\u00e3o deste m\u00f3dulo surge da necessidade de analisar feedbacks e sentimentos expressos por meio de cartas, ajudando a identificar padr\u00f5es de sentimento e recomenda\u00e7\u00f5es apropriadas com base em sentimentos anteriores. O m\u00f3dulo resolve o problema de entender e gerenciar respostas emocionais, permitindo que as cartas sejam ajustadas para melhor atender as expectativas dos usu\u00e1rios.</p>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<p>A estrutura do m\u00f3dulo \u00e9 organizada da seguinte forma:</p> <pre><code>- `deteccao_anomalia_sentimento.py`: Implementa\u00e7\u00e3o da classe DeteccaoAnomaliaSentimento, incluindo m\u00e9todos para armazenar sentimentos, detectar erros, e recomendar cartas.\n</code></pre>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#uso","title":"Uso","text":"<p>Para usar o m\u00f3dulo, \u00e9 necess\u00e1rio importar a classe e instanci\u00e1-la com um modelo CBOW e um DataFrame contendo as cartas e suas palavras-chave. A seguir est\u00e3o exemplos de uso:</p>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#exemplo","title":"Exemplo","text":"<pre><code>import pandas as pd\nfrom deteccao_anomalia_sentimento import DeteccaoAnomaliaSentimento\n\n# Exemplo de DataFrame com cartas e palavras-chave\ndata = {\n    'Descricao': ['Carta 1', 'Carta 2', 'Carta 3'],\n    'PalavrasChave': ['feliz, alegre', 'triste, decepcionado', 'neutro, comum']\n}\ndataFrame = pd.DataFrame(data)\n\n# Exemplo de modelo CBOW (substitua pela implementa\u00e7\u00e3o real)\nmodelo_cbow = {'feliz': np.random.rand(300), 'alegre': np.random.rand(300),\n               'triste': np.random.rand(300), 'decepcionado': np.random.rand(300),\n               'neutro': np.random.rand(300), 'comum': np.random.rand(300)}\n\ndetector = DeteccaoAnomaliaSentimento(modelo_cbow, dataFrame)\n\n# Armazenando uma carta e detectando anomalias\nresultado = detector.armazenar_cartas_positivas_e_negativas('Carta 1', 0.5, dataFrame, ['Carta 1', 'Carta 2'])\nprint(resultado)\n</code></pre>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#funcoes-e-classes-principais","title":"Fun\u00e7\u00f5es e Classes Principais","text":""},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#deteccaoanomaliasentimento","title":"<code>DeteccaoAnomaliaSentimento</code>","text":""},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#__init__modelo_cbow-dataframe","title":"<code>__init__(modelo_cbow, dataFrame)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Inicializa a classe <code>DeteccaoAnomaliaSentimento</code> com um modelo CBOW e um DataFrame de cartas.</li> <li>Par\u00e2metros:</li> <li><code>modelo_cbow</code>: Objeto do modelo CBOW utilizado para converter palavras em vetores.</li> <li><code>dataFrame</code>: DataFrame contendo as descri\u00e7\u00f5es das cartas e suas palavras-chave.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#armazenar_cartas_positivas_e_negativascartaatual-intensidadesentimento-listacartascompalavraschaves-cartas_subgrupo","title":"<code>armazenar_cartas_positivas_e_negativas(cartaAtual, intensidadeSentimento, listaCartasComPalavrasChaves, cartas_subgrupo)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Armazena palavras-chave positivas ou negativas de uma carta, de acordo com a intensidade do sentimento, e verifica a detec\u00e7\u00e3o de anomalias.</li> <li>Par\u00e2metros:</li> <li><code>cartaAtual</code>: A descri\u00e7\u00e3o da carta atual.</li> <li><code>intensidadeSentimento</code>: A intensidade do sentimento gerado pela carta.</li> <li><code>listaCartasComPalavrasChaves</code>: DataFrame contendo cartas e suas palavras-chave.</li> <li><code>cartas_subgrupo</code>: Lista de cartas pertencentes a um subgrupo espec\u00edfico.</li> <li>Retorno: Carta recomendada se houver detec\u00e7\u00e3o de anomalia, caso contr\u00e1rio, <code>None</code>.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#detectar_erroultimaintensidade-intensidadesentimento-cartas_subgrupo","title":"<code>detectar_erro(ultimaIntensidade, intensidadeSentimento, cartas_subgrupo)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Detecta se h\u00e1 repeti\u00e7\u00e3o de sentimentos positivos ou negativos consecutivos.</li> <li>Par\u00e2metros:</li> <li><code>ultimaIntensidade</code>: A \u00faltima intensidade do sentimento armazenada.</li> <li><code>intensidadeSentimento</code>: A nova intensidade do sentimento a ser verificada.</li> <li><code>cartas_subgrupo</code>: Lista de cartas pertencentes a um subgrupo espec\u00edfico.</li> <li>Retorno: Carta recomendada se uma anomalia for detectada, caso contr\u00e1rio, <code>None</code>.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#get_vectorpalavra","title":"<code>get_vector(palavra)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Obt\u00e9m o vetor associado a uma palavra do modelo CBOW.</li> <li>Par\u00e2metros:</li> <li><code>palavra</code>: A palavra a ser convertida em vetor.</li> <li>Retorno: O vetor da palavra, ou um vetor de zeros se a palavra n\u00e3o estiver no modelo.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#get_mean_vectorpalavras","title":"<code>get_mean_vector(palavras)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Calcula o vetor m\u00e9dio de uma lista de palavras.</li> <li>Par\u00e2metros:</li> <li><code>palavras</code>: Lista de palavras para calcular o vetor m\u00e9dio.</li> <li>Retorno: O vetor m\u00e9dio das palavras, ou um vetor de zeros se n\u00e3o houver vetores.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#calcular_similaridadevetor1-vetor2","title":"<code>calcular_similaridade(vetor1, vetor2)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Calcula a similaridade de cosseno entre dois vetores.</li> <li>Par\u00e2metros:</li> <li><code>vetor1</code>: O primeiro vetor.</li> <li><code>vetor2</code>: O segundo vetor.</li> <li>Retorno: A similaridade de cosseno entre os dois vetores.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#recomendar_cartasusuario_palavras-cartas_subgrupo","title":"<code>recomendar_cartas(usuario_palavras, cartas_subgrupo)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Recomenda cartas com base na similaridade das palavras-chave do usu\u00e1rio e das cartas do subgrupo.</li> <li>Par\u00e2metros:</li> <li><code>usuario_palavras</code>: Lista de palavras-chave do usu\u00e1rio.</li> <li><code>cartas_subgrupo</code>: Lista de cartas pertencentes a um subgrupo espec\u00edfico.</li> <li>Retorno: Carta recomendada com base na similaridade, ou <code>None</code> se n\u00e3o houver similaridades.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#testes","title":"Testes","text":"<p>Para executar a pipeline completa, utilize o seguinte comando:</p> <pre><code># Execute a pipeline completa\npython Recomendar_Cartas/mainRecomendar_Cartas.py\n</code></pre>"},{"location":"pipeline/RecomendarCartas/FluxoDeUsuario/","title":"Fluxo de Usu\u00e1rio no Aplicativo","text":""},{"location":"pipeline/RecomendarCartas/FluxoDeUsuario/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O fluxo de usu\u00e1rio no aplicativo envolve a navega\u00e7\u00e3o entre subgrupos e a recomenda\u00e7\u00e3o de cartas. O sistema calcula para qual subgrupo o usu\u00e1rio ser\u00e1 direcionado ap\u00f3s realizar atividades em um subgrupo atual. Cada subgrupo tem um conjunto de cartas recomendadas com caracter\u00edsticas espec\u00edficas, baseadas nos pilares aos quais o subgrupo est\u00e1 mais pr\u00f3ximo.</p>"},{"location":"pipeline/RecomendarCartas/FluxoDeUsuario/#subgrupos-e-pilares","title":"Subgrupos e Pilares","text":"<p>Existem 6 subgrupos principais no sistema: 1, 2, 4, 5, 7 e 8. Estes subgrupos s\u00e3o posicionados em um c\u00edrculo numerado de 1 a 9, mas os n\u00fameros 3, 6 e 9 n\u00e3o fazem parte dos subgrupos ativos, pois s\u00e3o considerados pilares principais, cada um associado a um aspecto diferente das cartas:</p> <ul> <li>Pilar 9: Emocional</li> <li>Pilar 3: Social</li> <li>Pilar 6: Cognitivo</li> </ul> <p>Cada subgrupo \u00e9 posicionado em rela\u00e7\u00e3o a esses pilares, de modo que suas cartas t\u00eam caracter\u00edsticas que refletem o pilar mais pr\u00f3ximo e o segundo pilar mais pr\u00f3ximo. Por exemplo: - O subgrupo 1 est\u00e1 mais pr\u00f3ximo do Pilar 9 (Emocional), seguido pelo Pilar 3 (Social). Assim, as cartas do subgrupo 1 s\u00e3o predominantemente +EMOCIONAL (mais caracter\u00edsticas emocionais) e -SOCIAL (menos caracter\u00edsticas sociais).</p> <p>Esse esquema permite que as recomenda\u00e7\u00f5es de cartas sejam altamente personalizadas com base na posi\u00e7\u00e3o do subgrupo e nos pilares que o influenciam.</p>"},{"location":"pipeline/RecomendarCartas/FluxoDeUsuario/#funcao-configura_indice_proximo_subgrupo","title":"Fun\u00e7\u00e3o <code>configura_indice_proximo_subgrupo</code>","text":"<p>A fun\u00e7\u00e3o <code>configura_indice_proximo_subgrupo</code> \u00e9 respons\u00e1vel por calcular o pr\u00f3ximo subgrupo para o qual o usu\u00e1rio deve ser direcionado ap\u00f3s realizar uma atividade no subgrupo atual. Ela utiliza uma l\u00f3gica baseada na \"Regra dos Vortex\", que envolve dobrar o valor do subgrupo atual e somar os d\u00edgitos resultantes.</p>"},{"location":"pipeline/RecomendarCartas/FluxoDeUsuario/#estrutura-da-funcao","title":"Estrutura da Fun\u00e7\u00e3o","text":"<pre><code>def configura_indice_proximo_subgrupo(self, ponto: int) -&gt; int:\n    \"\"\"Calcula o pr\u00f3ximo subgrupo de um ponto utilizando a regra dos Vortex.\n\n    Args:\n        ponto (int): Ponto inicial (subgrupo atual) para o c\u00e1lculo do pr\u00f3ximo subgrupo.\n\n    Returns:\n        int: Pr\u00f3ximo subgrupo calculado.\n    \"\"\"\n    ponto = 2 * ponto\n    proximo_ponto = sum(int(digito) for digito in str(ponto))\n    return proximo_ponto\n</code></pre>"},{"location":"pipeline/RecomendarCartas/FluxoDeUsuario/#parametros","title":"Par\u00e2metros","text":"<ul> <li>ponto (int): Representa o subgrupo atual onde o usu\u00e1rio est\u00e1 no momento. \u00c9 um n\u00famero inteiro entre os subgrupos dispon\u00edveis (1, 2, 4, 5, 7 ou 8).</li> </ul>"},{"location":"pipeline/RecomendarCartas/FluxoDeUsuario/#retorno","title":"Retorno","text":"<ul> <li>int: O pr\u00f3ximo subgrupo calculado, que ser\u00e1 o novo destino do usu\u00e1rio. Ele \u00e9 determinado pela soma dos d\u00edgitos do valor dobrado do subgrupo atual.</li> </ul>"},{"location":"pipeline/RecomendarCartas/FluxoDeUsuario/#logica-da-funcao","title":"L\u00f3gica da Fun\u00e7\u00e3o","text":"<ol> <li>O valor do subgrupo atual (par\u00e2metro <code>ponto</code>) \u00e9 multiplicado por 2.</li> <li>Os d\u00edgitos do resultado s\u00e3o somados para obter o pr\u00f3ximo subgrupo.</li> <li>Por exemplo, se o usu\u00e1rio est\u00e1 no subgrupo 1, o c\u00e1lculo ser\u00e1:<ul> <li><code>1 * 2 = 2</code></li> <li>Pr\u00f3ximo subgrupo: 2</li> </ul> </li> <li>Se o usu\u00e1rio est\u00e1 no subgrupo 8:<ul> <li><code>8 * 2 = 16</code>, ent\u00e3o <code>1 + 6 = 7</code></li> <li>Pr\u00f3ximo subgrupo: 7</li> </ul> </li> </ol>"},{"location":"pipeline/RecomendarCartas/FluxoDeUsuario/#fluxo-de-navegacao","title":"Fluxo de Navega\u00e7\u00e3o","text":"<ul> <li>O usu\u00e1rio inicia em um subgrupo (por exemplo, 1).</li> <li>Ap\u00f3s realizar a atividade proposta, o sistema calcula o pr\u00f3ximo subgrupo utilizando a fun\u00e7\u00e3o <code>configura_indice_proximo_subgrupo</code>.</li> <li>O usu\u00e1rio ent\u00e3o avan\u00e7a para o pr\u00f3ximo subgrupo determinado e recebe um novo conjunto de cartas relacionadas a esse subgrupo.</li> </ul>"},{"location":"pipeline/RecomendarCartas/FluxoDeUsuario/#exemplo-de-navegacao","title":"Exemplo de Navega\u00e7\u00e3o","text":"<ol> <li>O usu\u00e1rio est\u00e1 no subgrupo 1, realiza a atividade.</li> <li> <p>O sistema calcula: <code>1 * 2 = 2</code>, ent\u00e3o o pr\u00f3ximo subgrupo \u00e9 o subgrupo 2.</p> </li> <li> <p>No subgrupo 2, o usu\u00e1rio realiza uma nova atividade.</p> </li> <li>O sistema calcula: <code>2 * 2 = 4</code>, ent\u00e3o o pr\u00f3ximo subgrupo \u00e9 o subgrupo 4.</li> </ol> <p>Este ciclo continua at\u00e9 que o usu\u00e1rio percorra todos os subgrupos dispon\u00edveis.</p>"},{"location":"pipeline/RecomendarCartas/FluxoDeUsuario/#caracteristicas-das-cartas","title":"Caracter\u00edsticas das Cartas","text":"<p>As cartas recomendadas em cada subgrupo s\u00e3o influenciadas pelos pilares mais pr\u00f3ximos. Por exemplo: - Subgrupo 1: +EMOCIONAL, -SOCIAL (cartas que enfatizam atividades emocionais com uma influ\u00eancia menor do pilar social). - Subgrupo 2: -EMOCIONAL, +SOCIAL - Subgrupo 4: +SOCIAL, -COGNITIVO - Subgrupo 5: -SOCIAL, +COGNITIVO - Subgrupo 7: +COGNITIVO, -EMOCIONAL - Subgrupo 8: -COGNITIVO, +EMOCIONAL</p>"},{"location":"pipeline/RecomendarCartas/SistemaRecomendacao/","title":"SistemaRecomendacao","text":"<p>Classe respons\u00e1vel por gerenciar um sistema de recomenda\u00e7\u00e3o utilizando um dataset inicial. A classe permite a atualiza\u00e7\u00e3o do dataset, a sele\u00e7\u00e3o de cartas e a recomenda\u00e7\u00e3o de melhores op\u00e7\u00f5es com base em crit\u00e9rios definidos.</p>"},{"location":"pipeline/RecomendarCartas/SistemaRecomendacao/#atributos","title":"Atributos","text":"<ul> <li>dataset_inicial: <code>list</code> - Conjunto de dados inicial para o sistema de recomenda\u00e7\u00e3o.</li> <li>dataset_atual: <code>list</code> - C\u00f3pia profunda do dataset inicial, usada para armazenar o estado atual.</li> <li>subgrupo_atual: <code>dict</code> ou <code>None</code> - O subgrupo atualmente selecionado.</li> <li>tupla_melhor_carta_atual: <code>tuple</code> ou <code>None</code> - A melhor carta atualmente selecionada e seu custo associado.</li> <li>lista_cartas_e_custos_atual: <code>list</code> - Lista de cartas e seus respectivos custos atualizados.</li> <li>pulo_permitido: <code>bool</code> - Indica se o pulo entre cartas \u00e9 permitido.</li> <li>indice_grupo_atual: <code>int</code> ou <code>None</code> - \u00cdndice do grupo/subgrupo atual.</li> <li>indice_proximo_grupo: <code>int</code> ou <code>None</code> - \u00cdndice do pr\u00f3ximo grupo/subgrupo a ser considerado.</li> <li>classe_Atualiza_Cartas: <code>RetirarCartasNegacao</code> - Inst\u00e2ncia da classe respons\u00e1vel por atualizar as cartas.</li> <li>classe_caixa_de_Ferramentas: <code>CaixaDeFerramentas</code> - Inst\u00e2ncia da classe de ferramentas auxiliares.</li> </ul>"},{"location":"pipeline/RecomendarCartas/SistemaRecomendacao/#metodos","title":"M\u00e9todos","text":""},{"location":"pipeline/RecomendarCartas/SistemaRecomendacao/#__init__self-dataset_inicial-list-none","title":"<code>__init__(self, dataset_inicial: list) -&gt; None</code>","text":"<p>Inicializa a classe <code>SistemaRecomendacao</code> com um dataset inicial.</p> <p>Par\u00e2metros: - <code>dataset_inicial</code>: <code>list</code> - A lista de dados que ser\u00e1 utilizada para iniciar o sistema de recomenda\u00e7\u00e3o.</p>"},{"location":"pipeline/RecomendarCartas/SistemaRecomendacao/#funcaodebugself","title":"<code>funcaoDEBUG(self)</code>","text":"<p>Exibe informa\u00e7\u00f5es de depura\u00e7\u00e3o sobre o estado atual do sistema, incluindo o dataset, subgrupo atual, melhor carta e \u00edndices de grupos.</p>"},{"location":"pipeline/RecomendarCartas/SistemaRecomendacao/#atualiza_datasetself-opcoes_usuario-list-none","title":"<code>atualiza_dataset(self, opcoes_usuario: list) -&gt; None</code>","text":"<p>Atualiza o dataset atual removendo cartas com base nas op\u00e7\u00f5es fornecidas pelo usu\u00e1rio.</p> <p>Par\u00e2metros: - <code>opcoes_usuario</code>: <code>list</code> - Lista de op\u00e7\u00f5es fornecidas pelo usu\u00e1rio para remo\u00e7\u00e3o de cartas.</p>"},{"location":"pipeline/RecomendarCartas/SistemaRecomendacao/#atualizafluxoself-permissao_para_proximo_subgrupo-bool-bool","title":"<code>atualizaFluxo(self, permissao_para_proximo_subgrupo: bool) -&gt; bool</code>","text":"<p>Atualiza o fluxo do sistema para o pr\u00f3ximo subgrupo, caso a permiss\u00e3o seja concedida.</p> <p>Par\u00e2metros: - <code>permissao_para_proximo_subgrupo</code>: <code>bool</code> - Indica se a transi\u00e7\u00e3o para o pr\u00f3ximo subgrupo \u00e9 permitida.</p> <p>Retorna: - <code>bool</code> - <code>True</code> se a transi\u00e7\u00e3o foi bem-sucedida; caso contr\u00e1rio, <code>False</code>.</p>"},{"location":"pipeline/RecomendarCartas/SistemaRecomendacao/#atualiza_subgrupoatualself-id_subgrupo-dict-or-none","title":"<code>atualiza_subgrupoAtual(self, id_subgrupo) -&gt; dict or None</code>","text":"<p>Retorna o subgrupo correspondente ao ID fornecido.</p> <p>Par\u00e2metros: - <code>id_subgrupo</code>: <code>int</code> - Identificador \u00fanico do subgrupo a ser encontrado.</p> <p>Retorna: - <code>dict or None</code> - O subgrupo correspondente ou <code>None</code> se n\u00e3o encontrado.</p>"},{"location":"pipeline/RecomendarCartas/SistemaRecomendacao/#inicio_primeiracartaself-carta_escolhida-str","title":"<code>inicio_PrimeiraCarta(self, carta_escolhida: str)</code>","text":"<p>Inicia o processo com a primeira carta escolhida, atualizando o estado do subgrupo e das cartas.</p> <p>Par\u00e2metros: - <code>carta_escolhida</code>: <code>str</code> - Nome da carta escolhida para iniciar o processo.</p>"},{"location":"pipeline/RecomendarCartas/SistemaRecomendacao/#atualiza_informacoes_subgrupoself-carta-tuple-bool","title":"<code>atualiza_informacoes_subgrupo(self, carta: tuple) -&gt; bool</code>","text":"<p>Atualiza as informa\u00e7\u00f5es do subgrupo com base na carta fornecida, incluindo listas de cartas visitadas e n\u00fameros de Fibonacci.</p> <p>Par\u00e2metros: - <code>carta</code>: <code>tuple</code> - Tupla contendo a carta a ser atualizada.</p> <p>Retorna: - <code>bool</code> - <code>True</code> se a atualiza\u00e7\u00e3o foi bem-sucedida; caso contr\u00e1rio, <code>False</code>.</p>"},{"location":"pipeline/RecomendarCartas/SistemaRecomendacao/#configura_indice_proximo_subgrupoself-ponto-int-int","title":"<code>configura_indice_proximo_subgrupo(self, ponto: int) -&gt; int</code>","text":"<p>Calcula o \u00edndice do pr\u00f3ximo subgrupo com base em um ponto inicial, utilizando a regra dos Vortex.</p> <p>Par\u00e2metros: - <code>ponto</code>: <code>int</code> - Ponto inicial para o c\u00e1lculo do pr\u00f3ximo subgrupo.</p> <p>Retorna: - <code>int</code> - O \u00edndice do pr\u00f3ximo subgrupo calculado.</p>"},{"location":"pipeline/RecomendarCartas/SistemaRecomendacao/#atualiza_lista_cartas_recomendadasself-alfa-peso_probabilidade-peso_similaridade_exp-peso_similaridade_just-caderno_de_ouro-justificativa_usuario","title":"<code>atualiza_lista_cartas_recomendadas(self, alfa, peso_probabilidade, peso_similaridade_exp, peso_similaridade_just, caderno_de_ouro, justificativa_usuario)</code>","text":"<p>Atualiza a lista de cartas recomendadas com base nos par\u00e2metros fornecidos.</p> <p>Par\u00e2metros: - <code>alfa</code>: <code>float</code> - Par\u00e2metro para o c\u00e1lculo de custo. - <code>peso_probabilidade</code>: <code>float</code> - Peso atribu\u00eddo \u00e0 probabilidade. - <code>peso_similaridade_exp</code>: <code>float</code> - Peso atribu\u00eddo \u00e0 similaridade esperada. - <code>peso_similaridade_just</code>: <code>float</code> - Peso atribu\u00eddo \u00e0 similaridade justificada. - <code>caderno_de_ouro</code>: <code>list</code> - Informa\u00e7\u00f5es adicionais para a recomenda\u00e7\u00e3o. - <code>justificativa_usuario</code>: <code>str</code> - Justificativa fornecida pelo usu\u00e1rio.</p>"},{"location":"pipeline/RecomendarCartas/SistemaRecomendacao/#retorna_melhor_cartaself-permissao_para_pular_carta-bool-false-tuple","title":"<code>retorna_melhor_carta(self, permissao_para_pular_Carta: bool = False) -&gt; tuple</code>","text":"<p>Retorna a melhor carta atual e seu subgrupo associado, com a op\u00e7\u00e3o de pular a carta.</p> <p>Par\u00e2metros: - <code>permissao_para_pular_Carta</code>: <code>bool</code> - Indica se a carta atual pode ser pulada.</p> <p>Retorna: - <code>tuple</code> - A tupla contendo a melhor carta atual e seu subgrupo.</p>"},{"location":"pipeline/RecomendarCartas/SistemaRecomendacao/#escolher_cartaself-carta_atualnone","title":"<code>escolher_carta(self, carta_atual=None)</code>","text":"<p>Seleciona a carta atual a ser atualizada no subgrupo, com base na melhor carta ou na carta fornecida.</p> <p>Par\u00e2metros: - <code>carta_atual</code>: <code>tuple</code> ou <code>None</code> - A carta atual a ser escolhida; se <code>None</code>, usa a melhor carta.</p>"},{"location":"pipeline/RecomendarCartas/SistemaSemantico/","title":"Sistema Sem\u00e2ntico","text":""},{"location":"pipeline/RecomendarCartas/SistemaSemantico/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>A classe <code>SistemaSemantico</code> \u00e9 respons\u00e1vel por realizar o processamento sem\u00e2ntico de textos, permitindo a an\u00e1lise de similaridade entre diferentes textos utilizando vetores de palavras. Esta classe \u00e9 \u00fatil para aplica\u00e7\u00f5es que exigem a compara\u00e7\u00e3o sem\u00e2ntica de conte\u00fado textual, como no sistemas de recomenda\u00e7\u00e3o.</p>"},{"location":"pipeline/RecomendarCartas/SistemaSemantico/#classe-sistemasemantico","title":"Classe <code>SistemaSemantico</code>","text":""},{"location":"pipeline/RecomendarCartas/SistemaSemantico/#estrutura-da-classe","title":"Estrutura da Classe","text":"<p>A classe <code>SistemaSemantico</code> implementa m\u00e9todos para pr\u00e9-processamento de texto, obten\u00e7\u00e3o de representa\u00e7\u00f5es vetoriais e c\u00e1lculo de similaridade entre textos. Ela depende de um modelo de vetores de palavras (por exemplo, Word2Vec, GloVe) para gerar essas representa\u00e7\u00f5es.</p>"},{"location":"pipeline/RecomendarCartas/SistemaSemantico/#assinatura-da-classe","title":"Assinatura da Classe","text":"<pre><code>class SistemaSemantico:\n    def __init__(self, modelo):\n</code></pre>"},{"location":"pipeline/RecomendarCartas/SistemaSemantico/#parametros","title":"Par\u00e2metros","text":"<ul> <li><code>modelo</code>: Um modelo de vetores de palavras que ser\u00e1 utilizado para gerar representa\u00e7\u00f5es vetoriais dos textos. Pode ser um modelo treinado previamente, como o Word2Vec ou outro do tipo embedding.</li> </ul>"},{"location":"pipeline/RecomendarCartas/SistemaSemantico/#metodos","title":"M\u00e9todos","text":""},{"location":"pipeline/RecomendarCartas/SistemaSemantico/#preprocessamento_de_textotext","title":"<code>preprocessamento_de_texto(text)</code>","text":"<p>Este m\u00e9todo realiza o pr\u00e9-processamento do texto de entrada, removendo pontua\u00e7\u00f5es, convertendo todas as letras para min\u00fasculas e separando o texto em tokens (palavras). O objetivo \u00e9 deixar o texto em uma forma padr\u00e3o para facilitar a an\u00e1lise sem\u00e2ntica posterior.</p> <p>Par\u00e2metros: - <code>text</code> (str): O texto a ser pr\u00e9-processado.</p> <p>Retorno: - <code>list</code>: Uma lista de tokens resultante do texto pr\u00e9-processado.</p> <p>Exemplo de uso:</p> <pre><code>sistema_semantico = SistemaSemantico(modelo)\ntokens = sistema_semantico.preprocessamento_de_texto(\"Este \u00e9 um exemplo de texto.\")\nprint(tokens)  # Sa\u00edda: ['este', '\u00e9', 'um', 'exemplo', 'de', 'texto']\n</code></pre>"},{"location":"pipeline/RecomendarCartas/SistemaSemantico/#obter_vetor_mediomodelo-texto","title":"<code>obter_vetor_medio(modelo, texto)</code>","text":"<p>Este m\u00e9todo gera um vetor m\u00e9dio a partir dos vetores de palavras presentes no texto. Ele utiliza o modelo de vetores de palavras fornecido na inicializa\u00e7\u00e3o da classe. Se uma palavra do texto n\u00e3o estiver presente no modelo, ela \u00e9 ignorada. O vetor resultante \u00e9 a m\u00e9dia dos vetores de todas as palavras encontradas.</p> <p>Par\u00e2metros: - <code>modelo</code> (obj): O modelo de vetores de palavras utilizado para gerar os vetores das palavras. - <code>texto</code> (str): Texto de entrada para ser convertido em vetor m\u00e9dio.</p> <p>Retorno: - <code>numpy.ndarray</code>: Um vetor m\u00e9dio que representa o texto de entrada.</p> <p>Exemplo de uso:</p> <pre><code>vetor_medio = sistema_semantico.obter_vetor_medio(modelo, \"Este \u00e9 um exemplo de texto.\")\nprint(vetor_medio)  # Sa\u00edda: array([0.123, -0.234, ..., 0.456])\n</code></pre>"},{"location":"pipeline/RecomendarCartas/SistemaSemantico/#similaridade_cosseno_textostexto1-texto2","title":"<code>similaridade_cosseno_textos(texto1, texto2)</code>","text":"<p>Este m\u00e9todo calcula a similaridade de cosseno entre dois textos, utilizando os vetores m\u00e9dios gerados a partir de cada texto. A similaridade de cosseno \u00e9 uma m\u00e9trica que indica o qu\u00e3o semelhantes s\u00e3o dois textos em termos de seus vetores de palavras.</p> <p>Par\u00e2metros: - <code>texto1</code> (str): O primeiro texto a ser comparado. - <code>texto2</code> (str): O segundo texto a ser comparado.</p> <p>Retorno: - <code>float</code>: Um valor entre -1 e 1 que indica a similaridade entre os dois textos. Quanto mais pr\u00f3ximo de 1, maior a similaridade.</p> <p>Exemplo de uso:</p> <pre><code>similaridade = sistema_semantico.similaridade_cosseno_textos(\"Texto um\", \"Texto dois\")\nprint(similaridade)  # Sa\u00edda: 0.87 (alta similaridade)\n</code></pre>"},{"location":"pipeline/RecomendarCartas/SistemaSemantico/#exemplo-de-uso-completo","title":"Exemplo de Uso Completo","text":"<pre><code>from gensim.models import Word2Vec\n\n# Exemplo de cria\u00e7\u00e3o e uso da classe SistemaSemantico\nmodelo = Word2Vec.load(\"modelo_vetores.bin\")  # Carrega um modelo de vetores de palavras previamente treinado\n\nsistema_semantico = SistemaSemantico(modelo)\n\ntexto1 = \"O carro \u00e9 r\u00e1pido e confort\u00e1vel.\"\ntexto2 = \"O autom\u00f3vel \u00e9 veloz e confort\u00e1vel.\"\n\n# Pr\u00e9-processamento dos textos\ntokens1 = sistema_semantico.preprocessamento_de_texto(texto1)\ntokens2 = sistema_semantico.preprocessamento_de_texto(texto2)\n\n# Obten\u00e7\u00e3o dos vetores m\u00e9dios\nvetor1 = sistema_semantico.obter_vetor_medio(modelo, texto1)\nvetor2 = sistema_semantico.obter_vetor_medio(modelo, texto2)\n\n# C\u00e1lculo da similaridade\nsimilaridade = sistema_semantico.similaridade_cosseno_textos(texto1, texto2)\n\nprint(f\"Similaridade entre os textos: {similaridade}\")\n</code></pre>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/","title":"Seleciona Cartas Para o Usu\u00e1rio","text":""},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Este m\u00f3dulo \u00e9 respons\u00e1vel por sugerir cartas de Fibonacci com base nas respostas do usu\u00e1rio, utilizando t\u00e9cnicas de vetoriza\u00e7\u00e3o de texto e similaridade. O prop\u00f3sito do m\u00f3dulo \u00e9 proporcionar recomenda\u00e7\u00f5es personalizadas que ajudam os usu\u00e1rios a refletir sobre suas respostas e a explorar diferentes aspectos de suas experi\u00eancias. A motiva\u00e7\u00e3o para sua cria\u00e7\u00e3o vem da necessidade de uma abordagem din\u00e2mica e interativa para feedback e autoconhecimento, resolvendo problemas relacionados \u00e0 falta de personaliza\u00e7\u00e3o nas recomenda\u00e7\u00f5es de cartas.</p>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<p>O m\u00f3dulo \u00e9 composto pelos seguintes arquivos e pastas:</p> <pre><code>- `main.py`: Arquivo principal que executa a pipeline de recomenda\u00e7\u00e3o de cartas.\n- `vetorizacao.py`: Cont\u00e9m fun\u00e7\u00f5es para vetoriza\u00e7\u00e3o das respostas do usu\u00e1rio e similaridade entre vetores.\n- `cartas.py`: Inclui fun\u00e7\u00f5es para extrair e manipular cartas.\n- `utils/removerAlternativas.py`: Implementa a classe `RetirarCartNegacao`, que filtra respostas negativas.\n</code></pre>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#uso","title":"Uso","text":"<p>Para utilizar o m\u00f3dulo, importe as fun\u00e7\u00f5es desejadas e execute-as com as entradas apropriadas. Veja o exemplo abaixo:</p>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#exemplo","title":"Exemplo","text":"<pre><code>from vetorizacao import selecionar_cartas_para_usuario\n\nusuario = {\n    'respostas': {\n        'pergunta1': 'resposta1',\n        'pergunta2': None,\n        'pergunta3': 'resposta3'\n    }\n}\n\ncartas_recomendadas = selecionar_cartas_para_usuario(usuario)\nprint(cartas_recomendadas)\n</code></pre>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#funcoes-e-classes-principais","title":"Fun\u00e7\u00f5es e Classes Principais","text":""},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#vetorizar_respostas_usuariorespostas_usuario-max_features7","title":"<code>vetorizar_respostas_usuario(respostas_usuario, max_features=7)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Vetoriza as respostas do usu\u00e1rio usando o m\u00e9todo TF-IDF.</li> <li>Par\u00e2metros:</li> <li><code>respostas_usuario</code>: Lista de respostas do usu\u00e1rio.</li> <li><code>max_features</code>: N\u00famero m\u00e1ximo de features para o vetorizador TF-IDF.</li> <li>Retorno: Retorna uma matriz esparsa TF-IDF das respostas do usu\u00e1rio.</li> <li>Exce\u00e7\u00f5es: Lan\u00e7a <code>ValueError</code> se a lista de respostas estiver vazia ou contiver apenas valores <code>None</code>.</li> </ul>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#extrair_cartaslista","title":"<code>extrair_cartas(lista)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Extrai apenas as cartas de uma lista de objetos de cartas.</li> <li>Par\u00e2metros:</li> <li><code>lista</code>: Lista de objetos de carta com campos 'carta'.</li> <li>Retorno: Retorna uma lista de cartas extra\u00eddas.</li> </ul>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#ajustar_dimensoesvetor-tamanho_desejado","title":"<code>ajustar_dimensoes(vetor, tamanho_desejado)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Ajusta as dimens\u00f5es dos vetores para que todos tenham o mesmo n\u00famero de caracter\u00edsticas.</li> <li>Par\u00e2metros:</li> <li><code>vetor</code>: Matriz de vetores a serem ajustados.</li> <li><code>tamanho_desejado</code>: N\u00famero desejado de caracter\u00edsticas para todos os vetores.</li> <li>Retorno: Retorna a matriz de vetores ajustada.</li> </ul>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#selecionar_cartas_para_usuariouser-cartoes_filtrados_pular_cartanone","title":"<code>selecionar_cartas_para_usuario(user, cartoes_filtrados_pular_carta=None)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Sugere as principais cartas de Fibonacci para cada usu\u00e1rio com base em suas respostas.</li> <li>Par\u00e2metros:</li> <li><code>user</code>: Dicion\u00e1rio contendo informa\u00e7\u00f5es do usu\u00e1rio e suas respostas.</li> <li><code>cartoes_filtrados_pular_carta</code>: Cartas que devem ser puladas na recomenda\u00e7\u00e3o (opcional).</li> <li>Retorno: Lista das principais cartas de Fibonacci sugeridas ao usu\u00e1rio.</li> </ul>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#testes","title":"Testes","text":"<p>Voc\u00ea pode executar a pipeline completa com o seguinte comando:</p> <pre><code># Execute a pipeline completa\npython main.py\n</code></pre>"},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/","title":"Pular Primeira Carta","text":""},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O m\u00f3dulo <code>PularPrimeirasCarta</code> gerencia a l\u00f3gica de recomenda\u00e7\u00e3o e sele\u00e7\u00e3o de cartas durante um processo de intera\u00e7\u00e3o com o usu\u00e1rio. Utiliza a classe <code>SugerirCarta</code> para sugerir novas cartas quando necess\u00e1rio e permite que o usu\u00e1rio pule cartas com base em suas respostas e motivos de escolha. A motiva\u00e7\u00e3o para a cria\u00e7\u00e3o deste m\u00f3dulo \u00e9 fornecer uma experi\u00eancia de recomenda\u00e7\u00e3o mais din\u00e2mica e adaptativa, ajudando os usu\u00e1rios a encontrarem as cartas mais relevantes de acordo com suas prefer\u00eancias e intera\u00e7\u00f5es anteriores.</p>"},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<pre><code>- `PularPrimeirasCarta.py`: Implementa a classe PularPrimeirasCarta, que cont\u00e9m m\u00e9todos para gerenciar a l\u00f3gica de pular cartas, integrando-se \u00e0 classe SugerirCarta para recomenda\u00e7\u00f5es.\n- `SugerirCarta.py`: Cont\u00e9m a classe SugerirCarta, que utiliza TF-IDF e similaridade de cosseno para sugerir cartas com base nas respostas do usu\u00e1rio.\n- `artefatos_usuario/`:\n  - `cartoes_selecionados_usuario.json`: Arquivo JSON que armazena as cartas selecionadas e as respostas do usu\u00e1rio, utilizado para a l\u00f3gica de recomenda\u00e7\u00e3o.\n</code></pre>"},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/#uso","title":"Uso","text":"<p>Para utilizar o m\u00f3dulo, voc\u00ea deve instanciar a classe <code>PularPrimeirasCarta</code> e chamar o m\u00e9todo <code>pular_carta</code> com os par\u00e2metros adequados. O m\u00e9todo gerencia a l\u00f3gica de recomenda\u00e7\u00e3o e retorna a carta atual, o \u00edndice e as listas de cartas.</p>"},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/#exemplo","title":"Exemplo","text":"<pre><code>from PularPrimeirasCarta import PularPrimeirasCarta\n\n# Instanciar a classe\npular_cartas = PularPrimeirasCarta()\n\n# Definir par\u00e2metros\ncarta_atual = \"Carta Exemplo\"\nindice_atual = 0\ncinco_cartas = []\ncartas_ja_recomendadas = []\nporque_da_escolha = '1'\ntodas_as_respostas_do_usuario_sao_nulas = False\n\n# Chamar o m\u00e9todo para pular a carta\ncarta_atual, indice_atual, cinco_cartas, cartas_ja_recomendadas = pular_cartas.pular_carta(\n    carta_atual, indice_atual, cinco_cartas, cartas_ja_recomendadas, porque_da_escolha, todas_as_respostas_do_usuario_sao_nulas\n)\n\nprint(carta_atual)\n</code></pre>"},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/#funcoes-e-classes-principais","title":"Fun\u00e7\u00f5es e Classes Principais","text":""},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/#pular_cartaself-carta_atual-indice_atual-cinco_cartas-cartas_ja_recomendadas-porque_da_escolha-todas_as_respostas_do_usuario_sao_nulas","title":"<code>pular_carta(self, carta_atual, indice_atual, cinco_cartas, cartas_ja_recomendadas, porque_da_escolha, todas_as_respostas_do_usuario_sao_nulas)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Gerencia o processo de pular uma carta com base nas escolhas e respostas do usu\u00e1rio, retornando a carta atual e atualizando as listas de cartas.</li> <li>Par\u00e2metros:</li> <li><code>carta_atual</code> (str): Carta que est\u00e1 atualmente em exibi\u00e7\u00e3o.</li> <li><code>indice_atual</code> (int): \u00cdndice da carta atual na lista de cartas selecionadas.</li> <li><code>cinco_cartas</code> (list): Lista de at\u00e9 cinco cartas selecionadas para recomenda\u00e7\u00e3o.</li> <li><code>cartas_ja_recomendadas</code> (list): Lista de cartas que j\u00e1 foram recomendadas anteriormente.</li> <li><code>porque_da_escolha</code> (str): Motivo da escolha do usu\u00e1rio (valores poss\u00edveis: '1', '2', '3', '4').</li> <li><code>todas_as_respostas_do_usuario_sao_nulas</code> (bool): Indica se todas as respostas do usu\u00e1rio s\u00e3o nulas.</li> <li>Retorno: Um tuple contendo a carta atual, o \u00edndice da carta, a lista de cinco cartas selecionadas e a lista de cartas j\u00e1 recomendadas.</li> <li>Exce\u00e7\u00f5es: Se o motivo da escolha n\u00e3o for reconhecido, uma mensagem \u00e9 impressa no console.</li> </ul>"},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/#testes","title":"Testes","text":"<p>Voc\u00ea pode executar a l\u00f3gica de recomenda\u00e7\u00e3o e pular cartas com o seguinte comando:</p> <pre><code># Execute a l\u00f3gica de recomenda\u00e7\u00e3o\npython Sugerir_Primeiras_Cartas/mainSugerir_Primeiras_Cartas.py\n</code></pre>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/","title":"Sugerir Primeira Carta","text":""},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O m\u00f3dulo <code>sugerir_carta</code> \u00e9 projetado para sugerir cartas com base nas respostas do usu\u00e1rio. Ele utiliza t\u00e9cnicas de processamento de texto, como vetoriza\u00e7\u00e3o TF-IDF e c\u00e1lculo de similaridade de cosseno, para identificar as cartas mais relevantes de um conjunto dispon\u00edvel. A motiva\u00e7\u00e3o para sua cria\u00e7\u00e3o \u00e9 proporcionar um sistema que ajude os usu\u00e1rios a receber recomenda\u00e7\u00f5es personalizadas, melhorando a intera\u00e7\u00e3o e a satisfa\u00e7\u00e3o com o servi\u00e7o. O m\u00f3dulo resolve o problema de encontrar sugest\u00f5es adequadas a partir de um conjunto limitado de respostas, considerando tamb\u00e9m a hist\u00f3ria de recomenda\u00e7\u00f5es anteriores.</p>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<pre><code>- sugerir_carta.py: Classe SugerirCarta que cont\u00e9m m\u00e9todos para vetorizar respostas e sugerir cartas com base na similaridade.\n</code></pre>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#uso","title":"Uso","text":"<p>Para usar o m\u00f3dulo, voc\u00ea deve instanciar a classe <code>SugerirCarta</code> e chamar seus m\u00e9todos com os dados apropriados.</p>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#exemplo","title":"Exemplo","text":"<pre><code>from sugerir_carta import SugerirCarta\n\nsugeridor = SugerirCarta()\n\n# Exemplo de respostas do usu\u00e1rio\nrespostas_usuario = {\n    'respostas': {\n        'resposta1': 'texto da resposta 1',\n        'resposta2': 'texto da resposta 2'\n    }\n}\n\ncartas_selecionadas = ['Carta A', 'Carta B', 'Carta C', 'Carta D', 'Carta E']\ncartas_recomendadas, cartas_atualizadas = sugeridor.sugerir_carta(cartas_selecionadas, respostas_usuario)\nprint(cartas_recomendadas)\n</code></pre>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#funcoes-e-classes-principais","title":"Fun\u00e7\u00f5es e Classes Principais","text":""},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#sugerircarta","title":"<code>SugerirCarta</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Classe para sugerir cartas com base nas respostas do usu\u00e1rio, utilizando vetoriza\u00e7\u00e3o de texto TF-IDF e c\u00e1lculo de similaridade de cosseno.</li> </ul>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#__init__self","title":"<code>__init__(self)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Inicializa uma inst\u00e2ncia da classe SugerirCarta.</li> </ul>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#vetorizar_respostas_usuarioself-respostas_usuario-max_features7","title":"<code>vetorizar_respostas_usuario(self, respostas_usuario, max_features=7)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Vetoriza as respostas do usu\u00e1rio usando TF-IDF (Term Frequency-Inverse Document Frequency).</li> <li>Par\u00e2metros:</li> <li><code>respostas_usuario (list)</code>: Lista de respostas do usu\u00e1rio.</li> <li><code>max_features (int)</code>: N\u00famero m\u00e1ximo de features para o vetorizador TF-IDF.</li> <li>Retorno: <code>scipy.sparse.csr_matrix</code>: Matriz esparsa TF-IDF das respostas do usu\u00e1rio.</li> </ul>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#sugerir_cartaself-cartas_selecionadas-respostas_usuario-cartas_ja_recomendadasnone","title":"<code>sugerir_carta(self, cartas_selecionadas, respostas_usuario, cartas_ja_recomendadas=None)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Sugere cartas com base nas respostas do usu\u00e1rio. Utiliza posi\u00e7\u00f5es de Fibonacci e c\u00e1lculo de similaridade de cosseno para selecionar as cartas mais relevantes.</li> <li>Par\u00e2metros:</li> <li><code>cartas_selecionadas (list)</code>: Lista de cartas dispon\u00edveis para sele\u00e7\u00e3o.</li> <li><code>respostas_usuario (dict)</code>: Dicion\u00e1rio contendo as respostas do usu\u00e1rio.</li> <li><code>cartas_ja_recomendadas (list, optional)</code>: Lista de cartas que j\u00e1 foram recomendadas previamente.</li> <li>Retorno: <code>tuple</code>: Lista de cartas sugeridas e a lista de cartas j\u00e1 recomendadas atualizada.</li> </ul>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#testes","title":"Testes","text":"<p>Voc\u00ea pode executar a pipeline completa com o seguinte comando:</p> <pre><code># Execute a pipeline completa\npython Sugerir_Primeiras_Cartas/mainSugerir_Primeiras_Cartas.py\n</code></pre>"}]}