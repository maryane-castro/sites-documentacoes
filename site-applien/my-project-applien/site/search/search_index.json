{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NUVEN - IA APPLIEN","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o do projeto IA APPLIEN.</p>"},{"location":"#sobre-o-repositorio","title":"\ud83d\udcda Sobre o Reposit\u00f3rio","text":"<p>Este reposit\u00f3rio cont\u00e9m o c\u00f3digo da Prova de Conceito (POC) do IA APPLIEN. Aqui voc\u00ea encontrar\u00e1 todas as informa\u00e7\u00f5es necess\u00e1rias para configurar e utilizar o projeto.</p>"},{"location":"#pre-requisitos","title":"\ud83c\udfb2 Pr\u00e9-Requisitos","text":"<p>Antes de come\u00e7ar, verifique se voc\u00ea atende aos seguintes pr\u00e9-requisitos:</p> <ul> <li>Gerenciador de ambientes Conda instalado.</li> <li>CUDA Toolkit 11.8 ou superior instalado (caso o ambiente rode em GPU).</li> <li>Gerenciador de pacotes <code>pip</code> instalado.</li> </ul>"},{"location":"#instalacao","title":"\ud83d\udcbf Instala\u00e7\u00e3o","text":"<p>Siga as etapas abaixo para configurar o ambiente de desenvolvimento:</p>"},{"location":"#1-clone-o-repositorio","title":"1. Clone o reposit\u00f3rio","text":"<p>Clone este reposit\u00f3rio para o seu sistema local:</p> <pre><code>git clone https://github.com/nuven-applien/applien-ia.git\n</code></pre>"},{"location":"#2-crie-um-ambiente-via-conda","title":"2. Crie um ambiente via <code>conda</code>","text":"<p>Crie um ambiente Python 3.10.0 com o Conda:</p> <pre><code>conda create -n IAPPLIEN python=3.10.0\n</code></pre>"},{"location":"#3-instale-as-dependencias-do-projeto","title":"3. Instale as depend\u00eancias do projeto","text":"<p>Ative o ambiente criado e instale as depend\u00eancias:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"#estrutura-do-projeto","title":"Estrutura do projeto","text":"<pre><code>\u251c\u2500\u2500 artefatos\n\u2502   \u251c\u2500\u2500 base-dados-aleat\u00f3ria-alternativas.json\n\u2502   \u251c\u2500\u2500 cartas.json\n\u2502   \u251c\u2500\u2500 cartas_transformadas_fibonacci.json\n\u2502   \u251c\u2500\u2500 df_deteccao_anomalia.json\n\u2502   \u2514\u2500\u2500 df_subgrupos.json\n\u251c\u2500\u2500 artefatos_usuario\n\u2502   \u2514\u2500\u2500 cartoes_selecionados_usuario.json\n\u251c\u2500\u2500 assets\n\u2502   \u2514\u2500\u2500 logo.png\n\u251c\u2500\u2500 help.txt\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 model\n\u2502   \u251c\u2500\u2500 modeloCbow.py\n\u2502   \u2514\u2500\u2500 __pycache__\n\u2502       \u2514\u2500\u2500 modeloCbow.cpython-39.pyc\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 Recomendar_Cartas\n\u2502   \u251c\u2500\u2500 analise_Sentimento_LLAMA\n\u2502   \u2502   \u2514\u2500\u2500 Analise_Sentimento_LLAMA.py\n\u2502   \u251c\u2500\u2500 detectar_Anomalia\n\u2502   \u2502   \u251c\u2500\u2500 Detectar_Anomalia.py\n\u2502   \u2502   \u2514\u2500\u2500 __pycache__\n\u2502   \u2502       \u2514\u2500\u2500 Detectar_Anomalia.cpython-39.pyc\n\u2502   \u251c\u2500\u2500 funcao_Recomendar_Cartas.py\n\u2502   \u251c\u2500\u2500 mainRecomendar_Cartas.py\n\u2502   \u2514\u2500\u2500 sistema_Recomendacao\n\u2502       \u251c\u2500\u2500 __pycache__\n\u2502       \u2502   \u251c\u2500\u2500 Recomendar_Carta.cpython-39.pyc\n\u2502       \u2502   \u2514\u2500\u2500 Sistema_Recomendacao.cpython-39.pyc\n\u2502       \u2514\u2500\u2500 Sistema_Recomendacao.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 Selecionar_Cartas_do_Usuario\n\u2502   \u251c\u2500\u2500 mainSelecionar_Cartas.py\n\u2502   \u251c\u2500\u2500 __pycache__\n\u2502   \u2502   \u2514\u2500\u2500 Selecionar_Cartas.cpython-39.pyc\n\u2502   \u2514\u2500\u2500 Selecionar_Cartas.py\n\u251c\u2500\u2500 Sugerir_Primeiras_Cartas\n\u2502   \u251c\u2500\u2500 mainSugerir_Primeiras_Cartas.py\n\u2502   \u251c\u2500\u2500 Pular_Primeiras_Cartas.py\n\u2502   \u251c\u2500\u2500 __pycache__\n\u2502   \u2502   \u251c\u2500\u2500 Pular_Primeiras_Carta.cpython-39.pyc\n\u2502   \u2502   \u2514\u2500\u2500 Sugerir_Primeira_Carta.cpython-39.pyc\n\u2502   \u2514\u2500\u2500 Sugerir_Primeira_Carta.py\n\u2514\u2500\u2500 utils\n    \u251c\u2500\u2500 caixaDeFerramentas.py\n    \u251c\u2500\u2500 carregarJson.py\n    \u251c\u2500\u2500 preProcessamento.py\n    \u251c\u2500\u2500 __pycache__\n    \u2502   \u251c\u2500\u2500 caixaDeFerramentas.cpython-39.pyc\n    \u2502   \u251c\u2500\u2500 carregarJson.cpython-39.pyc\n    \u2502   \u251c\u2500\u2500 preProcessamento.cpython-39.pyc\n    \u2502   \u251c\u2500\u2500 removerAlternativas.cpython-39.pyc\n    \u2502   \u2514\u2500\u2500 sistemaSemantico.cpython-39.pyc\n    \u251c\u2500\u2500 removerAlternativas.py\n    \u2514\u2500\u2500 sistemaSemantico.py\n</code></pre>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/","title":"Analisador de Sentimentos","text":""},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O m\u00f3dulo <code>SentimentAnalyzer</code> \u00e9 uma ferramenta projetada para analisar sentimentos em respostas de usu\u00e1rios, utilizando um modelo de linguagem (LLM) para processar o texto e gerar uma an\u00e1lise de sentimento. Este m\u00f3dulo \u00e9 capaz de interpretar respostas textuais, converter a an\u00e1lise em um formato estruturado (JSON) e visualizar a intensidade do sentimento ao longo do tempo atrav\u00e9s de um gr\u00e1fico.</p>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<pre><code>- `sentiment_analyzer.py`: Cont\u00e9m a implementa\u00e7\u00e3o da classe SentimentAnalyzer.\n</code></pre>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#uso","title":"Uso","text":"<p>Para utilizar o m\u00f3dulo, \u00e9 necess\u00e1rio instanciar a classe <code>SentimentAnalyzer</code> e chamar o m\u00e9todo <code>main</code> com as respostas do usu\u00e1rio e o n\u00famero de dias de inatividade.</p>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#exemplo","title":"Exemplo","text":"<pre><code>from sentiment_analyzer import SentimentAnalyzer\n\nanalyzer = SentimentAnalyzer()\n\nresposta1 = \"Estou me sentindo bem hoje.\"\nresposta2 = \"O trabalho tem sido desafiador, mas gratificante.\"\nresposta3 = \"Estou ansioso para as f\u00e9rias do pr\u00f3ximo m\u00eas.\"\ndias_inatividade = 5\n\ntemp_file_name, json_result = analyzer.main(resposta1, resposta2, resposta3, dias_inatividade)\n\nprint(f\"Arquivo do gr\u00e1fico: {temp_file_name}\")\nprint(f\"Resultado JSON:\\n{json_result}\")\n</code></pre>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#funcoes-e-classes-principais","title":"Fun\u00e7\u00f5es e Classes Principais","text":""},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#sentimentanalyzer","title":"<code>SentimentAnalyzer</code>","text":""},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#__init__model_namellama31-temperature0001","title":"<code>__init__(model_name=\"llama3.1\", temperature=0.001)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Inicializa a classe SentimentAnalyzer com um modelo de linguagem espec\u00edfico.</li> <li>Par\u00e2metros:</li> <li><code>model_name</code>: Nome do modelo Ollama a ser utilizado (padr\u00e3o: \"llama3.1\").</li> <li><code>temperature</code>: Temperatura para gera\u00e7\u00e3o de texto (padr\u00e3o: 0.001).</li> </ul>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#process_jsonresposta","title":"<code>process_json(resposta)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Processa a resposta do modelo LLM e converte em um dicion\u00e1rio JSON estruturado.</li> <li>Par\u00e2metros:</li> <li><code>resposta</code>: String contendo a resposta do modelo LLM.</li> <li>Retorno: Uma tupla contendo o dicion\u00e1rio JSON processado e sua representa\u00e7\u00e3o em string.</li> </ul>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#gerar_respostauser_input-prompt","title":"<code>gerar_resposta(user_input, prompt)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Gera uma resposta usando o modelo LLM com base nas entradas do usu\u00e1rio.</li> <li>Par\u00e2metros:</li> <li><code>user_input</code>: Tupla contendo as respostas do usu\u00e1rio e dias de inatividade.</li> <li><code>prompt</code>: Template de prompt para o modelo LLM.</li> <li>Retorno: A resposta gerada pelo modelo LLM.</li> </ul>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#gerar_graficodata","title":"<code>gerar_grafico(data)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Gera um gr\u00e1fico de linha suave mostrando a intensidade do sentimento ao longo do tempo.</li> <li>Par\u00e2metros:</li> <li><code>data</code>: Dicion\u00e1rio contendo os dados de sentimento.</li> <li>Retorno: Nome do arquivo tempor\u00e1rio onde o gr\u00e1fico foi salvo.</li> </ul>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#mainresposta1-resposta2-resposta3-dias_inatividade","title":"<code>main(resposta1, resposta2, resposta3, dias_inatividade)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: M\u00e9todo principal que orquestra o processo de an\u00e1lise de sentimento.</li> <li>Par\u00e2metros:</li> <li><code>resposta1</code>, <code>resposta2</code>, <code>resposta3</code>: Strings contendo as respostas do usu\u00e1rio.</li> <li><code>dias_inatividade</code>: N\u00famero de dias de inatividade.</li> <li>Retorno: Uma tupla contendo o nome do arquivo do gr\u00e1fico e a representa\u00e7\u00e3o JSON do resultado.</li> </ul>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#dependencias","title":"Depend\u00eancias","text":"<p>O m\u00f3dulo requer as seguintes bibliotecas:</p> <ul> <li>langchain_community</li> <li>matplotlib</li> <li>sklearn</li> <li>scipy</li> <li>numpy</li> </ul> <p>Certifique-se de instal\u00e1-las antes de usar o m\u00f3dulo.</p>"},{"location":"pipeline/RecomendarCartas/AnaliseSentimentoLLAMA/#notas-adicionais","title":"Notas Adicionais","text":"<ul> <li>O m\u00f3dulo utiliza o Ollama como modelo de linguagem, assegure-se de que ele esteja corretamente configurado em seu ambiente.</li> <li>O gr\u00e1fico gerado \u00e9 salvo temporariamente e o caminho do arquivo \u00e9 retornado. Lembre-se de gerenciar adequadamente esses arquivos tempor\u00e1rios em sua aplica\u00e7\u00e3o.</li> <li>A an\u00e1lise de sentimento considera valores negativos para sentimentos negativos, o que \u00e9 refletido no gr\u00e1fico gerado.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/","title":"Detec\u00e7\u00e3o Anomalia","text":""},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O m\u00f3dulo <code>DeteccaoAnomaliaSentimento</code> \u00e9 projetado para detectar anomalias em sentimentos baseados em cartas, utilizando palavras-chave e um modelo CBOW (Continuous Bag of Words) para calcular a similaridade entre palavras. A motiva\u00e7\u00e3o para a cria\u00e7\u00e3o deste m\u00f3dulo surge da necessidade de analisar feedbacks e sentimentos expressos por meio de cartas, ajudando a identificar padr\u00f5es de sentimento e recomenda\u00e7\u00f5es apropriadas com base em sentimentos anteriores. O m\u00f3dulo resolve o problema de entender e gerenciar respostas emocionais, permitindo que as cartas sejam ajustadas para melhor atender as expectativas dos usu\u00e1rios.</p>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<p>A estrutura do m\u00f3dulo \u00e9 organizada da seguinte forma:</p> <pre><code>- `deteccao_anomalia_sentimento.py`: Implementa\u00e7\u00e3o da classe DeteccaoAnomaliaSentimento, incluindo m\u00e9todos para armazenar sentimentos, detectar erros, e recomendar cartas.\n</code></pre>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#uso","title":"Uso","text":"<p>Para usar o m\u00f3dulo, \u00e9 necess\u00e1rio importar a classe e instanci\u00e1-la com um modelo CBOW e um DataFrame contendo as cartas e suas palavras-chave. A seguir est\u00e3o exemplos de uso:</p>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#exemplo","title":"Exemplo","text":"<pre><code>import pandas as pd\nfrom deteccao_anomalia_sentimento import DeteccaoAnomaliaSentimento\n\n# Exemplo de DataFrame com cartas e palavras-chave\ndata = {\n    'Descricao': ['Carta 1', 'Carta 2', 'Carta 3'],\n    'PalavrasChave': ['feliz, alegre', 'triste, decepcionado', 'neutro, comum']\n}\ndataFrame = pd.DataFrame(data)\n\n# Exemplo de modelo CBOW (substitua pela implementa\u00e7\u00e3o real)\nmodelo_cbow = {'feliz': np.random.rand(300), 'alegre': np.random.rand(300),\n               'triste': np.random.rand(300), 'decepcionado': np.random.rand(300),\n               'neutro': np.random.rand(300), 'comum': np.random.rand(300)}\n\ndetector = DeteccaoAnomaliaSentimento(modelo_cbow, dataFrame)\n\n# Armazenando uma carta e detectando anomalias\nresultado = detector.armazenar_cartas_positivas_e_negativas('Carta 1', 0.5, dataFrame, ['Carta 1', 'Carta 2'])\nprint(resultado)\n</code></pre>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#funcoes-e-classes-principais","title":"Fun\u00e7\u00f5es e Classes Principais","text":""},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#deteccaoanomaliasentimento","title":"<code>DeteccaoAnomaliaSentimento</code>","text":""},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#__init__modelo_cbow-dataframe","title":"<code>__init__(modelo_cbow, dataFrame)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Inicializa a classe <code>DeteccaoAnomaliaSentimento</code> com um modelo CBOW e um DataFrame de cartas.</li> <li>Par\u00e2metros:</li> <li><code>modelo_cbow</code>: Objeto do modelo CBOW utilizado para converter palavras em vetores.</li> <li><code>dataFrame</code>: DataFrame contendo as descri\u00e7\u00f5es das cartas e suas palavras-chave.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#armazenar_cartas_positivas_e_negativascartaatual-intensidadesentimento-listacartascompalavraschaves-cartas_subgrupo","title":"<code>armazenar_cartas_positivas_e_negativas(cartaAtual, intensidadeSentimento, listaCartasComPalavrasChaves, cartas_subgrupo)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Armazena palavras-chave positivas ou negativas de uma carta, de acordo com a intensidade do sentimento, e verifica a detec\u00e7\u00e3o de anomalias.</li> <li>Par\u00e2metros:</li> <li><code>cartaAtual</code>: A descri\u00e7\u00e3o da carta atual.</li> <li><code>intensidadeSentimento</code>: A intensidade do sentimento gerado pela carta.</li> <li><code>listaCartasComPalavrasChaves</code>: DataFrame contendo cartas e suas palavras-chave.</li> <li><code>cartas_subgrupo</code>: Lista de cartas pertencentes a um subgrupo espec\u00edfico.</li> <li>Retorno: Carta recomendada se houver detec\u00e7\u00e3o de anomalia, caso contr\u00e1rio, <code>None</code>.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#detectar_erroultimaintensidade-intensidadesentimento-cartas_subgrupo","title":"<code>detectar_erro(ultimaIntensidade, intensidadeSentimento, cartas_subgrupo)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Detecta se h\u00e1 repeti\u00e7\u00e3o de sentimentos positivos ou negativos consecutivos.</li> <li>Par\u00e2metros:</li> <li><code>ultimaIntensidade</code>: A \u00faltima intensidade do sentimento armazenada.</li> <li><code>intensidadeSentimento</code>: A nova intensidade do sentimento a ser verificada.</li> <li><code>cartas_subgrupo</code>: Lista de cartas pertencentes a um subgrupo espec\u00edfico.</li> <li>Retorno: Carta recomendada se uma anomalia for detectada, caso contr\u00e1rio, <code>None</code>.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#get_vectorpalavra","title":"<code>get_vector(palavra)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Obt\u00e9m o vetor associado a uma palavra do modelo CBOW.</li> <li>Par\u00e2metros:</li> <li><code>palavra</code>: A palavra a ser convertida em vetor.</li> <li>Retorno: O vetor da palavra, ou um vetor de zeros se a palavra n\u00e3o estiver no modelo.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#get_mean_vectorpalavras","title":"<code>get_mean_vector(palavras)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Calcula o vetor m\u00e9dio de uma lista de palavras.</li> <li>Par\u00e2metros:</li> <li><code>palavras</code>: Lista de palavras para calcular o vetor m\u00e9dio.</li> <li>Retorno: O vetor m\u00e9dio das palavras, ou um vetor de zeros se n\u00e3o houver vetores.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#calcular_similaridadevetor1-vetor2","title":"<code>calcular_similaridade(vetor1, vetor2)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Calcula a similaridade de cosseno entre dois vetores.</li> <li>Par\u00e2metros:</li> <li><code>vetor1</code>: O primeiro vetor.</li> <li><code>vetor2</code>: O segundo vetor.</li> <li>Retorno: A similaridade de cosseno entre os dois vetores.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#recomendar_cartasusuario_palavras-cartas_subgrupo","title":"<code>recomendar_cartas(usuario_palavras, cartas_subgrupo)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Recomenda cartas com base na similaridade das palavras-chave do usu\u00e1rio e das cartas do subgrupo.</li> <li>Par\u00e2metros:</li> <li><code>usuario_palavras</code>: Lista de palavras-chave do usu\u00e1rio.</li> <li><code>cartas_subgrupo</code>: Lista de cartas pertencentes a um subgrupo espec\u00edfico.</li> <li>Retorno: Carta recomendada com base na similaridade, ou <code>None</code> se n\u00e3o houver similaridades.</li> </ul>"},{"location":"pipeline/RecomendarCartas/DetectarAnomalia/#testes","title":"Testes","text":"<p>Para executar a pipeline completa, utilize o seguinte comando:</p> <pre><code># Execute a pipeline completa\npython Recomendar_Cartas/mainRecomendar_Cartas.py\n</code></pre>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/","title":"Seleciona Cartas Para o Usu\u00e1rio","text":""},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Este m\u00f3dulo \u00e9 respons\u00e1vel por sugerir cartas de Fibonacci com base nas respostas do usu\u00e1rio, utilizando t\u00e9cnicas de vetoriza\u00e7\u00e3o de texto e similaridade. O prop\u00f3sito do m\u00f3dulo \u00e9 proporcionar recomenda\u00e7\u00f5es personalizadas que ajudam os usu\u00e1rios a refletir sobre suas respostas e a explorar diferentes aspectos de suas experi\u00eancias. A motiva\u00e7\u00e3o para sua cria\u00e7\u00e3o vem da necessidade de uma abordagem din\u00e2mica e interativa para feedback e autoconhecimento, resolvendo problemas relacionados \u00e0 falta de personaliza\u00e7\u00e3o nas recomenda\u00e7\u00f5es de cartas.</p>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<p>O m\u00f3dulo \u00e9 composto pelos seguintes arquivos e pastas:</p> <pre><code>- `main.py`: Arquivo principal que executa a pipeline de recomenda\u00e7\u00e3o de cartas.\n- `vetorizacao.py`: Cont\u00e9m fun\u00e7\u00f5es para vetoriza\u00e7\u00e3o das respostas do usu\u00e1rio e similaridade entre vetores.\n- `cartas.py`: Inclui fun\u00e7\u00f5es para extrair e manipular cartas.\n- `utils/removerAlternativas.py`: Implementa a classe `RetirarCartNegacao`, que filtra respostas negativas.\n</code></pre>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#uso","title":"Uso","text":"<p>Para utilizar o m\u00f3dulo, importe as fun\u00e7\u00f5es desejadas e execute-as com as entradas apropriadas. Veja o exemplo abaixo:</p>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#exemplo","title":"Exemplo","text":"<pre><code>from vetorizacao import selecionar_cartas_para_usuario\n\nusuario = {\n    'respostas': {\n        'pergunta1': 'resposta1',\n        'pergunta2': None,\n        'pergunta3': 'resposta3'\n    }\n}\n\ncartas_recomendadas = selecionar_cartas_para_usuario(usuario)\nprint(cartas_recomendadas)\n</code></pre>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#funcoes-e-classes-principais","title":"Fun\u00e7\u00f5es e Classes Principais","text":""},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#vetorizar_respostas_usuariorespostas_usuario-max_features7","title":"<code>vetorizar_respostas_usuario(respostas_usuario, max_features=7)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Vetoriza as respostas do usu\u00e1rio usando o m\u00e9todo TF-IDF.</li> <li>Par\u00e2metros:</li> <li><code>respostas_usuario</code>: Lista de respostas do usu\u00e1rio.</li> <li><code>max_features</code>: N\u00famero m\u00e1ximo de features para o vetorizador TF-IDF.</li> <li>Retorno: Retorna uma matriz esparsa TF-IDF das respostas do usu\u00e1rio.</li> <li>Exce\u00e7\u00f5es: Lan\u00e7a <code>ValueError</code> se a lista de respostas estiver vazia ou contiver apenas valores <code>None</code>.</li> </ul>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#extrair_cartaslista","title":"<code>extrair_cartas(lista)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Extrai apenas as cartas de uma lista de objetos de cartas.</li> <li>Par\u00e2metros:</li> <li><code>lista</code>: Lista de objetos de carta com campos 'carta'.</li> <li>Retorno: Retorna uma lista de cartas extra\u00eddas.</li> </ul>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#ajustar_dimensoesvetor-tamanho_desejado","title":"<code>ajustar_dimensoes(vetor, tamanho_desejado)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Ajusta as dimens\u00f5es dos vetores para que todos tenham o mesmo n\u00famero de caracter\u00edsticas.</li> <li>Par\u00e2metros:</li> <li><code>vetor</code>: Matriz de vetores a serem ajustados.</li> <li><code>tamanho_desejado</code>: N\u00famero desejado de caracter\u00edsticas para todos os vetores.</li> <li>Retorno: Retorna a matriz de vetores ajustada.</li> </ul>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#selecionar_cartas_para_usuariouser-cartoes_filtrados_pular_cartanone","title":"<code>selecionar_cartas_para_usuario(user, cartoes_filtrados_pular_carta=None)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Sugere as principais cartas de Fibonacci para cada usu\u00e1rio com base em suas respostas.</li> <li>Par\u00e2metros:</li> <li><code>user</code>: Dicion\u00e1rio contendo informa\u00e7\u00f5es do usu\u00e1rio e suas respostas.</li> <li><code>cartoes_filtrados_pular_carta</code>: Cartas que devem ser puladas na recomenda\u00e7\u00e3o (opcional).</li> <li>Retorno: Lista das principais cartas de Fibonacci sugeridas ao usu\u00e1rio.</li> </ul>"},{"location":"pipeline/SelecionarCartasUsuario/SelecionarCartas/#testes","title":"Testes","text":"<p>Voc\u00ea pode executar a pipeline completa com o seguinte comando:</p> <pre><code># Execute a pipeline completa\npython main.py\n</code></pre>"},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/","title":"Pular Primeira Carta","text":""},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O m\u00f3dulo <code>PularPrimeirasCarta</code> gerencia a l\u00f3gica de recomenda\u00e7\u00e3o e sele\u00e7\u00e3o de cartas durante um processo de intera\u00e7\u00e3o com o usu\u00e1rio. Utiliza a classe <code>SugerirCarta</code> para sugerir novas cartas quando necess\u00e1rio e permite que o usu\u00e1rio pule cartas com base em suas respostas e motivos de escolha. A motiva\u00e7\u00e3o para a cria\u00e7\u00e3o deste m\u00f3dulo \u00e9 fornecer uma experi\u00eancia de recomenda\u00e7\u00e3o mais din\u00e2mica e adaptativa, ajudando os usu\u00e1rios a encontrarem as cartas mais relevantes de acordo com suas prefer\u00eancias e intera\u00e7\u00f5es anteriores.</p>"},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<pre><code>- `PularPrimeirasCarta.py`: Implementa a classe PularPrimeirasCarta, que cont\u00e9m m\u00e9todos para gerenciar a l\u00f3gica de pular cartas, integrando-se \u00e0 classe SugerirCarta para recomenda\u00e7\u00f5es.\n- `SugerirCarta.py`: Cont\u00e9m a classe SugerirCarta, que utiliza TF-IDF e similaridade de cosseno para sugerir cartas com base nas respostas do usu\u00e1rio.\n- `artefatos_usuario/`:\n  - `cartoes_selecionados_usuario.json`: Arquivo JSON que armazena as cartas selecionadas e as respostas do usu\u00e1rio, utilizado para a l\u00f3gica de recomenda\u00e7\u00e3o.\n</code></pre>"},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/#uso","title":"Uso","text":"<p>Para utilizar o m\u00f3dulo, voc\u00ea deve instanciar a classe <code>PularPrimeirasCarta</code> e chamar o m\u00e9todo <code>pular_carta</code> com os par\u00e2metros adequados. O m\u00e9todo gerencia a l\u00f3gica de recomenda\u00e7\u00e3o e retorna a carta atual, o \u00edndice e as listas de cartas.</p>"},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/#exemplo","title":"Exemplo","text":"<pre><code>from PularPrimeirasCarta import PularPrimeirasCarta\n\n# Instanciar a classe\npular_cartas = PularPrimeirasCarta()\n\n# Definir par\u00e2metros\ncarta_atual = \"Carta Exemplo\"\nindice_atual = 0\ncinco_cartas = []\ncartas_ja_recomendadas = []\nporque_da_escolha = '1'\ntodas_as_respostas_do_usuario_sao_nulas = False\n\n# Chamar o m\u00e9todo para pular a carta\ncarta_atual, indice_atual, cinco_cartas, cartas_ja_recomendadas = pular_cartas.pular_carta(\n    carta_atual, indice_atual, cinco_cartas, cartas_ja_recomendadas, porque_da_escolha, todas_as_respostas_do_usuario_sao_nulas\n)\n\nprint(carta_atual)\n</code></pre>"},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/#funcoes-e-classes-principais","title":"Fun\u00e7\u00f5es e Classes Principais","text":""},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/#pular_cartaself-carta_atual-indice_atual-cinco_cartas-cartas_ja_recomendadas-porque_da_escolha-todas_as_respostas_do_usuario_sao_nulas","title":"<code>pular_carta(self, carta_atual, indice_atual, cinco_cartas, cartas_ja_recomendadas, porque_da_escolha, todas_as_respostas_do_usuario_sao_nulas)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Gerencia o processo de pular uma carta com base nas escolhas e respostas do usu\u00e1rio, retornando a carta atual e atualizando as listas de cartas.</li> <li>Par\u00e2metros:</li> <li><code>carta_atual</code> (str): Carta que est\u00e1 atualmente em exibi\u00e7\u00e3o.</li> <li><code>indice_atual</code> (int): \u00cdndice da carta atual na lista de cartas selecionadas.</li> <li><code>cinco_cartas</code> (list): Lista de at\u00e9 cinco cartas selecionadas para recomenda\u00e7\u00e3o.</li> <li><code>cartas_ja_recomendadas</code> (list): Lista de cartas que j\u00e1 foram recomendadas anteriormente.</li> <li><code>porque_da_escolha</code> (str): Motivo da escolha do usu\u00e1rio (valores poss\u00edveis: '1', '2', '3', '4').</li> <li><code>todas_as_respostas_do_usuario_sao_nulas</code> (bool): Indica se todas as respostas do usu\u00e1rio s\u00e3o nulas.</li> <li>Retorno: Um tuple contendo a carta atual, o \u00edndice da carta, a lista de cinco cartas selecionadas e a lista de cartas j\u00e1 recomendadas.</li> <li>Exce\u00e7\u00f5es: Se o motivo da escolha n\u00e3o for reconhecido, uma mensagem \u00e9 impressa no console.</li> </ul>"},{"location":"pipeline/SugerirPrimeirasCartas/PularPrimeiraCarta/#testes","title":"Testes","text":"<p>Voc\u00ea pode executar a l\u00f3gica de recomenda\u00e7\u00e3o e pular cartas com o seguinte comando:</p> <pre><code># Execute a l\u00f3gica de recomenda\u00e7\u00e3o\npython Sugerir_Primeiras_Cartas/mainSugerir_Primeiras_Cartas.py\n</code></pre>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/","title":"Sugerir Primeira Carta","text":""},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O m\u00f3dulo <code>sugerir_carta</code> \u00e9 projetado para sugerir cartas com base nas respostas do usu\u00e1rio. Ele utiliza t\u00e9cnicas de processamento de texto, como vetoriza\u00e7\u00e3o TF-IDF e c\u00e1lculo de similaridade de cosseno, para identificar as cartas mais relevantes de um conjunto dispon\u00edvel. A motiva\u00e7\u00e3o para sua cria\u00e7\u00e3o \u00e9 proporcionar um sistema que ajude os usu\u00e1rios a receber recomenda\u00e7\u00f5es personalizadas, melhorando a intera\u00e7\u00e3o e a satisfa\u00e7\u00e3o com o servi\u00e7o. O m\u00f3dulo resolve o problema de encontrar sugest\u00f5es adequadas a partir de um conjunto limitado de respostas, considerando tamb\u00e9m a hist\u00f3ria de recomenda\u00e7\u00f5es anteriores.</p>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<pre><code>- sugerir_carta.py: Classe SugerirCarta que cont\u00e9m m\u00e9todos para vetorizar respostas e sugerir cartas com base na similaridade.\n</code></pre>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#uso","title":"Uso","text":"<p>Para usar o m\u00f3dulo, voc\u00ea deve instanciar a classe <code>SugerirCarta</code> e chamar seus m\u00e9todos com os dados apropriados.</p>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#exemplo","title":"Exemplo","text":"<pre><code>from sugerir_carta import SugerirCarta\n\nsugeridor = SugerirCarta()\n\n# Exemplo de respostas do usu\u00e1rio\nrespostas_usuario = {\n    'respostas': {\n        'resposta1': 'texto da resposta 1',\n        'resposta2': 'texto da resposta 2'\n    }\n}\n\ncartas_selecionadas = ['Carta A', 'Carta B', 'Carta C', 'Carta D', 'Carta E']\ncartas_recomendadas, cartas_atualizadas = sugeridor.sugerir_carta(cartas_selecionadas, respostas_usuario)\nprint(cartas_recomendadas)\n</code></pre>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#funcoes-e-classes-principais","title":"Fun\u00e7\u00f5es e Classes Principais","text":""},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#sugerircarta","title":"<code>SugerirCarta</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Classe para sugerir cartas com base nas respostas do usu\u00e1rio, utilizando vetoriza\u00e7\u00e3o de texto TF-IDF e c\u00e1lculo de similaridade de cosseno.</li> </ul>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#__init__self","title":"<code>__init__(self)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Inicializa uma inst\u00e2ncia da classe SugerirCarta.</li> </ul>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#vetorizar_respostas_usuarioself-respostas_usuario-max_features7","title":"<code>vetorizar_respostas_usuario(self, respostas_usuario, max_features=7)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Vetoriza as respostas do usu\u00e1rio usando TF-IDF (Term Frequency-Inverse Document Frequency).</li> <li>Par\u00e2metros:</li> <li><code>respostas_usuario (list)</code>: Lista de respostas do usu\u00e1rio.</li> <li><code>max_features (int)</code>: N\u00famero m\u00e1ximo de features para o vetorizador TF-IDF.</li> <li>Retorno: <code>scipy.sparse.csr_matrix</code>: Matriz esparsa TF-IDF das respostas do usu\u00e1rio.</li> </ul>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#sugerir_cartaself-cartas_selecionadas-respostas_usuario-cartas_ja_recomendadasnone","title":"<code>sugerir_carta(self, cartas_selecionadas, respostas_usuario, cartas_ja_recomendadas=None)</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Sugere cartas com base nas respostas do usu\u00e1rio. Utiliza posi\u00e7\u00f5es de Fibonacci e c\u00e1lculo de similaridade de cosseno para selecionar as cartas mais relevantes.</li> <li>Par\u00e2metros:</li> <li><code>cartas_selecionadas (list)</code>: Lista de cartas dispon\u00edveis para sele\u00e7\u00e3o.</li> <li><code>respostas_usuario (dict)</code>: Dicion\u00e1rio contendo as respostas do usu\u00e1rio.</li> <li><code>cartas_ja_recomendadas (list, optional)</code>: Lista de cartas que j\u00e1 foram recomendadas previamente.</li> <li>Retorno: <code>tuple</code>: Lista de cartas sugeridas e a lista de cartas j\u00e1 recomendadas atualizada.</li> </ul>"},{"location":"pipeline/SugerirPrimeirasCartas/SugerirPrimeiraCarta/#testes","title":"Testes","text":"<p>Voc\u00ea pode executar a pipeline completa com o seguinte comando:</p> <pre><code># Execute a pipeline completa\npython Sugerir_Primeiras_Cartas/mainSugerir_Primeiras_Cartas.py\n</code></pre>"}]}