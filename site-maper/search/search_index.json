{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NUVEN - IA MAPER","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o do projeto IA MAPER.</p>"},{"location":"#sobre-o-repositorio","title":"\ud83d\udcda Sobre o Reposit\u00f3rio","text":"<p>Este reposit\u00f3rio cont\u00e9m o c\u00f3digo da Prova de Conceito (POC) do IA MAPER. Aqui voc\u00ea encontrar\u00e1 todas as informa\u00e7\u00f5es necess\u00e1rias para configurar e utilizar o projeto.</p> <p> </p>"},{"location":"#pre-requisitos","title":"\ud83c\udfb2 Pr\u00e9-Requisitos","text":"<p>Antes de come\u00e7ar, verifique se voc\u00ea atende aos seguintes pr\u00e9-requisitos:</p> <ul> <li>Gerenciador de ambientes Conda instalado.</li> <li>CUDA Toolkit 11.8 ou superior instalado (caso o ambiente rode em GPU).</li> <li>Gerenciador de pacotes <code>pip</code> instalado.</li> </ul>"},{"location":"#instalacao","title":"\ud83d\udcbf Instala\u00e7\u00e3o","text":"<p>Siga as etapas abaixo para configurar o ambiente de desenvolvimento:</p>"},{"location":"#1-clone-o-repositorio","title":"1. Clone o reposit\u00f3rio","text":"<p>Clone este reposit\u00f3rio para o seu sistema local:</p> <pre><code>git clone https://github.com/nuven-iamaper/iamaper-ia.git\n</code></pre>"},{"location":"#2-crie-um-ambiente-via-conda","title":"2. Crie um ambiente via <code>conda</code>","text":"<p>Crie um ambiente Python 3.10.0 com o Conda:</p> <pre><code>conda create -n IAmaper python=3.10.0\n</code></pre>"},{"location":"#3-instale-as-dependencias-do-projeto","title":"3. Instale as depend\u00eancias do projeto","text":"<p>Ative o ambiente criado e instale as depend\u00eancias:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"#4-reinstale-pytorch-com-suporte-a-cuda-opcional","title":"4. Reinstale PyTorch com suporte a CUDA (opcional)","text":"<p>Caso o ambiente de execu\u00e7\u00e3o tenha GPU, reinstale o Pytorch com suporte a CUDA:</p> <pre><code>pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118\n</code></pre>"},{"location":"#estrutura-do-projeto","title":"Estrutura do projeto","text":"<pre><code>artifacts/\n    \u251c\u2500\u2500 audio_exemplo.wav\n    \u251c\u2500\u2500 bloco_1_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_2_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_3_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_4_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_5_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_6_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_7_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_8_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_9_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_10_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_11_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_12_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_13_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_14_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_15_por_grupo_notas.json\n    \u251c\u2500\u2500 bloco_16_por_grupo_notas.json\n    \u251c\u2500\u2500 competencias.json\n    \u251c\u2500\u2500 conexoes.json\n    \u251c\u2500\u2500 copia_de_questoes.json\n    \u251c\u2500\u2500 feedbacks.json\n    \u251c\u2500\u2500 new_pdi_feedbacks.json\n    \u251c\u2500\u2500 old_pdi_feedbacks.json\n    \u251c\u2500\u2500 resultado.json\n    \u2514\u2500\u2500 saida_final.json\n\nassets/\n    \u2514\u2500\u2500 logo.png\n\naudio/\n    \u251c\u2500\u2500 TextToSpeechProcessor.py\n    \u2514\u2500\u2500 utils.py\n\ndocs/\n    \u251c\u2500\u2500 DevolutivaGenerator.md\n    \u251c\u2500\u2500 docsUtils/\n    \u2502   \u251c\u2500\u2500 calcular_resutado_maper.md\n    \u2502   \u251c\u2500\u2500 gerar_pdf_saida_pdi.md\n    \u2502   \u251c\u2500\u2500 global_dict.md\n    \u2502   \u251c\u2500\u2500 prompts.md\n    \u2502   \u2514\u2500\u2500 save_json_file.md\n    \u251c\u2500\u2500 Geral.md\n    \u251c\u2500\u2500 llm_models.md\n    \u251c\u2500\u2500 PDIGenerator.md\n    \u2514\u2500\u2500 TextToSpeechProcessor.md\n\nmodel/\n    \u2514\u2500\u2500 llm_models.py\n\npipeline/\n    \u251c\u2500\u2500 DevolutivaGenerator.py\n    \u2514\u2500\u2500 PDIGenerator.py\n\nutils/\n    \u251c\u2500\u2500 calcular_resutado_maper.py\n    \u251c\u2500\u2500 devolutive_plus_connection.py\n    \u251c\u2500\u2500 gerar_pdf_saida_pdi.py\n    \u251c\u2500\u2500 global_dict.py\n    \u251c\u2500\u2500 prompts.py\n    \u2514\u2500\u2500 save_json_file.py\n\nmain.py\nREADME.md\nrequirements.txt\n</code></pre>"},{"location":"pipeline/audio/","title":"Devolutiva","text":""},{"location":"pipeline/audio/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Este m\u00f3dulo cont\u00e9m a implementa\u00e7\u00e3o da classe AudioProcessor, que \u00e9 respons\u00e1vel pelo processamento de \u00e1udio. A classe oferece funcionalidades para gerar arquivos de \u00e1udio a partir de texto(devolutiva), bem como para combinar esses arquivos, permitindo uma manipula\u00e7\u00e3o eficaz de conte\u00fados sonoros. Com um enfoque em flexibilidade e efici\u00eancia, a AudioProcessor facilita a integra\u00e7\u00e3o de recursos de \u00e1udio em aplica\u00e7\u00f5es que demandam s\u00edntese e edi\u00e7\u00e3o de som.</p>"},{"location":"pipeline/audio/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<pre><code>audio/\n    audio/TextToSpeechProcessor.py  # Classe para este m\u00f3dulo espec\u00edfico.\n    audio/utils.py  # Arquivo com utilidades dedicadas a este m\u00f3dulo.\nTTS/\n    Fa\u00e7a o clone do reposit\u00f3rio TTS dentro da pasta audio e realize a instala\u00e7\u00e3o via pip.\n...\n</code></pre>"},{"location":"pipeline/audio/#uso","title":"Uso","text":"<p>Aqui est\u00e1 um exemplo de utiliza\u00e7\u00e3o do m\u00f3dulo.</p>"},{"location":"pipeline/audio/#exemplo","title":"Exemplo","text":"<pre><code>from audio.TextToSpeechProcessor import AudioProcessor\nimport json\n\n# -&gt; \u00c1UDIO\nprocessor = AudioProcessor()\npath_input = \"./artifacts/resultado.json\"  # nome do arquivo de entrada\nwith open(path_input, 'r', encoding='utf-8') as file:\n    json_data = json.load(file)\ntext_devolutiva = json_data[\"saida\"]\n\noutput_file = processor.process_text_to_audio(\n    text_devolutiva,\n    \"./artifacts/audio_devolutiva.wav\" # nome de sa\u00edda do arquivo\n)\n\n</code></pre>"},{"location":"pipeline/audio/#funcoes-e-classes-principais","title":"Fun\u00e7\u00f5es e Classes Principais","text":""},{"location":"pipeline/audio/#audioprocessor","title":"<code>AudioProcessor</code>","text":"<ul> <li> <p>Descri\u00e7\u00e3o: Classe para processamento de \u00e1udio, incluindo a gera\u00e7\u00e3o de arquivos de \u00e1udio a partir de texto e a combina\u00e7\u00e3o desses arquivos.</p> </li> <li> <p>Atributos:</p> </li> <li> <p><code>model</code>: Inst\u00e2ncia do modelo TTS para s\u00edntese de fala, configurada com base em arquivos de configura\u00e7\u00e3o, vocabul\u00e1rio e ponto de verifica\u00e7\u00e3o.</p> </li> <li> <p>Par\u00e2metros do Construtor:</p> </li> <li><code>tts_model_path (str)</code>: Caminho para o modelo TTS.</li> <li> <p><code>gpu (bool)</code>: Se <code>True</code>, utiliza GPU para processamento; caso contr\u00e1rio, utiliza CPU.</p> </li> <li> <p>M\u00e9todos Principais:</p> </li> <li><code>split_text_by_sentence(text)</code>: Divide o texto em senten\u00e7as, retornando uma lista de senten\u00e7as.</li> <li><code>process_and_save_audio(split_texts, output_path)</code>: Processa cada parte do texto em \u00e1udio e salva o \u00e1udio combinado em um arquivo especificado.</li> <li><code>process_text_to_audio(text, combined_output_path)</code>: Processa o texto em \u00e1udio combinado e salva o arquivo resultante.</li> </ul>"},{"location":"pipeline/audio/#testes","title":"Testes","text":"<p>Voc\u00ea pode executar a pipeline completa com o seguinte comando</p> <pre><code># Execute a pipeline completa\npython main.py\n</code></pre>"},{"location":"pipeline/devolutiva/","title":"Devolutiva","text":""},{"location":"pipeline/devolutiva/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Este script Python foi projetado para gerar devolutivas completas e personalizadas, utilizando dados de pacientes e notas de compet\u00eancias. Com o suporte de um modelo de linguagem avan\u00e7ado da fam\u00edlia LLAMA/GROQ, o sistema \u00e9 capaz de processar e interpretar informa\u00e7\u00f5es complexas, resultando em relat\u00f3rios detalhados que atendem \u00e0s necessidades individuais de cada paciente.</p> <p>A ferramenta visa facilitar o acompanhamento e a avalia\u00e7\u00e3o do desempenho, oferecendo feedbacks construtivos e direcionados. Com isso, busca-se contribuir para o desenvolvimento cont\u00ednuo das compet\u00eancias, promovendo uma abordagem mais eficaz no gerenciamento de informa\u00e7\u00f5es e no suporte aos pacientes.</p>"},{"location":"pipeline/devolutiva/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<pre><code>model/\n    llm_models.py  # Cont\u00e9m as classes respons\u00e1veis pela cria\u00e7\u00e3o e instancia\u00e7\u00e3o dos modelos de linguagem (LLM).\n\nutils/\n    prompts.py  # Armazena os prompts e alguns m\u00e9todos para gerar a devolutiva.\n    save_json_file.py  # Salva o resultado da devolutiva em um arquivo JSON.\n...\n</code></pre>"},{"location":"pipeline/devolutiva/#uso","title":"Uso","text":"<p>Aqui est\u00e1 um exemplo de utiliza\u00e7\u00e3o do m\u00f3dulo.</p>"},{"location":"pipeline/devolutiva/#exemplo","title":"Exemplo","text":"<pre><code>from pipeline.DevolutivaGenerator import DevolutivaGenerator\nfrom utils.calcular_resutado_maper import calc_resul_maper\n\n\ngroq_key = \"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\"\n\nrespostas_usuario = {\n    \"nome_usuario\": \"Jessyca\",\n    \"respostas\": [\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"b\",\"a\",\"a\",\"b\",\"a\",\"b\",\"a\",\"a\",\"b\",\"a\",\"a\",\"a\",\"a\",\"b\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\",\"b\",\"a\",\"b\",\"a\",\"a\",\"b\",\"a\",\"a\",\"b\",\"b\",\"b\",\"a\",\"b\",\"b\",\"b\",\"a\",\"b\",\"b\",\"b\",\"a\",\"b\",\"b\",\"b\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"a\",\"b\",\"b\",\"b\",\"b\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"a\",\"b\",\"a\",\"b\",\"b\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\",\"b\",\"a\",\"b\"\n    ],\n    \"sexo\": \"feminino\",\n    \"data_nascimento\": \"12/05/1990\",\n    \"profissao\": \"professora\"\n}\n\n# -&gt; CALCULAR MAPPER TESTE\nresultado, grades_notas_maper = calc_resul_maper(\n            respostas_usuario['nome_usuario'],\n            respostas_usuario['data_nascimento'],\n            respostas_usuario[\"respostas\"],\n        )\n\n\n# -&gt; DEVOLUTIVA\nprint(grades_notas_maper)\ndevolutiva_generator = DevolutivaGenerator(respostas_usuario[\"nome_usuario\"], \n                                           respostas_usuario[\"data_nascimento\"],\n                                           respostas_usuario[\"profissao\"],\n                                           respostas_usuario[\"sexo\"],\n                                           grades_notas_maper,\n                                           groq_key)\n\nresultado = devolutiva_generator.generate_devolutiva()\nprint(resultado)\n</code></pre>"},{"location":"pipeline/devolutiva/#funcoes-e-classes-principais","title":"Fun\u00e7\u00f5es e Classes Principais","text":""},{"location":"pipeline/devolutiva/#devolutivagenerator","title":"<code>DevolutivaGenerator</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Classe para a gera\u00e7\u00e3o de devolutivas completas a partir de dados de pacientes.</li> <li>Par\u00e2metros do Construtor:</li> <li><code>name (str)</code>: Nome do paciente.</li> <li><code>birthday (str)</code>: Data de anivers\u00e1rio do paciente.</li> <li><code>profession (str)</code>: Profiss\u00e3o do paciente.</li> <li><code>sex (str)</code>: G\u00eanero do paciente.</li> <li><code>grades (dict)</code>: Dicion\u00e1rio contendo as notas de cada compet\u00eancia.</li> <li> <p><code>groq_key (str)</code>: Chave de acesso ao modelo IA Groq.</p> </li> <li> <p>M\u00e9todos Principais:</p> </li> <li> <p><code>generate_devolutiva()</code>: M\u00e9todo que executa o pipeline completo de gera\u00e7\u00e3o da devolutiva, retornando um texto consolidado.</p> </li> <li> <p>M\u00e9todos Privados:</p> </li> <li><code>__generate_presentation_section()</code>: Gera a se\u00e7\u00e3o de apresenta\u00e7\u00e3o da devolutiva.</li> <li><code>__generate_competence_section()</code>: Gera a se\u00e7\u00e3o que aborda coment\u00e1rios sobre as notas de cada compet\u00eancia.</li> <li><code>__generate_graphs_section()</code>: Gera a se\u00e7\u00e3o que aborda coment\u00e1rios sobre os gr\u00e1ficos apresentados no PDI.</li> <li><code>__generate_ending_section()</code>: Gera a se\u00e7\u00e3o de encerramento da devolutiva.</li> <li><code>__merge_sections(sections)</code>: Une o texto de cada se\u00e7\u00e3o da devolutiva em um s\u00f3.</li> </ul>"},{"location":"pipeline/devolutiva/#testes","title":"Testes","text":"<p>Voc\u00ea pode executar a pipeline completa com o seguinte comando</p> <pre><code># Execute a pipeline completa\npython main.py\n</code></pre>"},{"location":"pipeline/pdi/","title":"PDI","text":""},{"location":"pipeline/pdi/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Este conjunto de scripts e arquivos \u00e9 utilizado para a estrutura\u00e7\u00e3o e gera\u00e7\u00e3o de Planos de Desenvolvimento Individual (PDI) baseados em avalia\u00e7\u00f5es de compet\u00eancias. O sistema foi desenvolvido para facilitar a personaliza\u00e7\u00e3o e o acompanhamento do progresso de cada indiv\u00edduo, permitindo a cria\u00e7\u00e3o de PDIs que atendam \u00e0s necessidades espec\u00edficas de desenvolvimento.</p> <p>Por meio da an\u00e1lise das compet\u00eancias avaliadas, os usu\u00e1rios podem obter um plano estruturado que orienta o aprimoramento cont\u00ednuo, promovendo uma abordagem mais eficaz no desenvolvimento pessoal e profissional.</p>"},{"location":"pipeline/pdi/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<pre><code>model/\n    llm_models.py  # Cont\u00e9m as classes respons\u00e1veis pela cria\u00e7\u00e3o e instancia\u00e7\u00e3o dos modelos de linguagem (LLM).\n\nutils/\n    global_dict.py  # Armazena vari\u00e1veis globais utilizadas em todo o projeto.\n...\n</code></pre>"},{"location":"pipeline/pdi/#uso","title":"Uso","text":"<p>Aqui est\u00e1 um exemplo de utiliza\u00e7\u00e3o do m\u00f3dulo.</p>"},{"location":"pipeline/pdi/#exemplo","title":"Exemplo","text":"<p>Dentro do reposit\u00f3rio IAMAPER-IA, crie um arquivo qualquer .py</p> <pre><code>from pipeline.PDIGenerator import PDIGenerator\nfrom utils.calcular_resutado_maper import calc_resul_maper\nfrom utils.gerar_pdf_saida_pdi import gerar_pdf\n\ngroq_key = \"sua_chave_groq\"\nrespostas_usuario = {\n    \"nome_usuario\": \"Jessyca\",\n    \"respostas\": [\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"b\",\"a\",\"a\",\"b\",\"a\",\"b\",\"a\",\"a\",\"b\",\"a\",\"a\",\"a\",\"a\",\"b\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\",\"b\",\"a\",\"b\",\"a\",\"a\",\"b\",\"a\",\"a\",\"b\",\"b\",\"b\",\"a\",\"b\",\"b\",\"b\",\"a\",\"b\",\"b\",\"b\",\"a\",\"b\",\"b\",\"b\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"a\",\"b\",\"b\",\"b\",\"b\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"a\",\"b\",\"a\",\"b\",\"b\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\",\"b\",\"a\",\"b\"\n    ],\n    \"sexo\": \"feminino\",\n    \"data_nascimento\": \"12/05/1990\",\n    \"profissao\": \"professora\"\n}\n\n# -&gt; CALCULAR TESTE MAPER\nresultado, grades_notas_maper = calc_resul_maper(\n            respostas_usuario['nome_usuario'],\n            respostas_usuario['data_nascimento'],\n            respostas_usuario[\"respostas\"],\n        )\n\n# -&gt; PDI\npdi_generator = PDIGenerator('./artifacts/new_pdi_feedbacks.json', respostas_usuario, grades_notas_maper, groq_key)\nresultado_pdi = pdi_generator.generate_pdi()\ngerar_pdf('./artifacts/output_pdi.pdf', resultado_pdi)\n\n</code></pre>"},{"location":"pipeline/pdi/#funcoes-e-classes-principais","title":"Fun\u00e7\u00f5es e Classes Principais","text":""},{"location":"pipeline/pdi/#pdigenerator","title":"<code>PDIGenerator</code>","text":"<ul> <li> <p>Descri\u00e7\u00e3o: Classe respons\u00e1vel pela gera\u00e7\u00e3o de Planos de Desenvolvimento Individual (PDI) a partir de feedbacks e notas de compet\u00eancias de usu\u00e1rios, utilizando modelos de linguagem para a cria\u00e7\u00e3o de recomenda\u00e7\u00f5es personalizadas.</p> </li> <li> <p>Par\u00e2metros do Construtor:</p> </li> <li><code>path_pdi_feedbacks (str)</code>: Caminho para o arquivo JSON contendo feedbacks de PDI.</li> <li><code>user_datas (dict)</code>: Dicion\u00e1rio com informa\u00e7\u00f5es do usu\u00e1rio, incluindo nome e outras informa\u00e7\u00f5es relevantes.</li> <li><code>nota_maper (dict)</code>: Dicion\u00e1rio que cont\u00e9m as notas obtidas pelo usu\u00e1rio em diferentes compet\u00eancias.</li> <li> <p><code>groq_key (str)</code>: Chave de acesso ao modelo de IA Groq.</p> </li> <li> <p>M\u00e9todos Principais:</p> </li> <li><code>generate(prompt)</code>: Gera uma resposta baseada no prompt fornecido utilizando o modelo de linguagem.</li> <li> <p><code>generate_pdi()</code>: Executa o c\u00e1lculo das recomenda\u00e7\u00f5es de PDI e retorna uma lista de resultados.</p> </li> <li> <p>M\u00e9todos Privados:</p> </li> <li><code>_calcular_pdis(nao_ideal, nome_usuario)</code>: Calcula as recomenda\u00e7\u00f5es de PDI com base nas notas n\u00e3o ideais e no nome do usu\u00e1rio.</li> <li><code>__read_pdi_feedbacks(path_pdi_feedbacks)</code>: L\u00ea e carrega feedbacks de PDI a partir de um arquivo JSON.</li> <li><code>prompt_feedback(nome_do_usuario, nota, competencia, exemplo_feedback)</code>: Gera um feedback estruturado para o usu\u00e1rio baseado nas notas de compet\u00eancias e um exemplo.</li> <li><code>prompt_section(reescrita_section)</code>: Reescreve se\u00e7\u00f5es de texto com outras palavras, retornando as frases reescritas.</li> <li><code>get_pdi(competence_id, grade, competence, nome_usuario)</code>: Obt\u00e9m as recomenda\u00e7\u00f5es de PDI para uma compet\u00eancia espec\u00edfica, com base nas notas e feedbacks.</li> </ul>"},{"location":"pipeline/pdi/#testes","title":"Testes","text":"<p>Voc\u00ea pode executar a pipeline completa com o seguinte comando</p> <pre><code># Execute a pipeline completa\npython main.py\n</code></pre>"},{"location":"utils/prompts/","title":"M\u00f3dulo Prompts","text":"<p>O m\u00f3dulo <code>prompts.py</code> \u00e9 respons\u00e1vel por gerar prompts e feedbacks personalizados para o sistema de avalia\u00e7\u00e3o de desempenho e desenvolvimento pessoal, em conformidade com as diretrizes do teste MAPER. Este m\u00f3dulo integra funcionalidades de leitura de arquivos JSON, c\u00e1lculo de \u00edndices e gera\u00e7\u00e3o de textos para relat\u00f3rios, proporcionando uma experi\u00eancia de feedback clara e adaptada \u00e0s necessidades do usu\u00e1rio.</p>"},{"location":"utils/prompts/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<p>O m\u00f3dulo cont\u00e9m as seguintes classes e fun\u00e7\u00f5es:</p>"},{"location":"utils/prompts/#classes","title":"Classes","text":""},{"location":"utils/prompts/#getpromptsfeedbackandgraphics","title":"<code>GetPromptsFeedbackAndGraphics</code>","text":"<p>Esta classe \u00e9 projetada para gerar prompts que fornecem feedbacks e descri\u00e7\u00f5es de gr\u00e1ficos baseados nos resultados de um teste, levando em conta as notas do usu\u00e1rio e seus dados pessoais.</p> <p>Construtor: - <code>__init__(self, nome: str, notas: dict, data_nascimento: str)</code>     - Par\u00e2metros:         - <code>nome</code> (str): Nome do paciente.         - <code>notas</code> (dict): Dicion\u00e1rio que cont\u00e9m as notas do paciente por compet\u00eancia.         - <code>data_nascimento</code> (str): Data de nascimento do paciente.     - Descri\u00e7\u00e3o: Inicializa a classe, carregando feedbacks de um arquivo JSON e calculando o \u00edndice geral do usu\u00e1rio.</p> <p>M\u00e9todos: - <code>_open_feedback_json()</code>     - Descri\u00e7\u00e3o: Carrega os feedbacks e compet\u00eancias de arquivos JSON e retorna os dados.</p> <ul> <li> <p><code>_generate_feedbacks()</code></p> <ul> <li>Descri\u00e7\u00e3o: Gera feedbacks relevantes com base nas notas do paciente, filtrando os resultados do teste.</li> </ul> </li> <li> <p><code>_gererate_general_index()</code></p> <ul> <li>Descri\u00e7\u00e3o: Calcula o \u00edndice geral do paciente com base nas notas m\u00e9dias.</li> </ul> </li> <li> <p><code>_generate_score_mapertest_style()</code></p> <ul> <li>Descri\u00e7\u00e3o: Gera uma nota para cada estilo do teste MAPER com base nas compet\u00eancias do usu\u00e1rio.</li> </ul> </li> <li> <p><code>get_graphics_and_score_prompt()</code></p> <ul> <li>Descri\u00e7\u00e3o: Cria um prompt detalhado que resume os resultados do teste, incluindo gr\u00e1ficos e an\u00e1lises de desempenho.</li> </ul> </li> <li> <p><code>get_feedbacks_prompt()</code></p> <ul> <li>Descri\u00e7\u00e3o: Retorna um prompt contendo feedbacks personalizados sobre as compet\u00eancias avaliadas.</li> </ul> </li> </ul>"},{"location":"utils/prompts/#funcoes","title":"Fun\u00e7\u00f5es","text":""},{"location":"utils/prompts/#get_merge_promptsections-profession-sex-birthday","title":"<code>get_merge_prompt(sections, profession, sex, birthday)</code>","text":"<p>Esta fun\u00e7\u00e3o cria um prompt que une diferentes se\u00e7\u00f5es de feedback em um texto cont\u00ednuo, utilizando conectivos para garantir fluidez e coer\u00eancia.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>sections</code> (list): Lista contendo as se\u00e7\u00f5es de feedback.</li> <li><code>profession</code> (str): Profiss\u00e3o do usu\u00e1rio.</li> <li><code>sex</code> (str): G\u00eanero do usu\u00e1rio.</li> <li><code>birthday</code> (str): Data de nascimento do usu\u00e1rio.</li> </ul> </li> <li>Retorno:<ul> <li>Um prompt que combina as se\u00e7\u00f5es e adapta o texto para manter um tom conversacional, sem repeti\u00e7\u00f5es.</li> </ul> </li> </ul>"},{"location":"utils/prompts/#uso-do-modulo","title":"Uso do M\u00f3dulo","text":"<p>Para utilizar o m\u00f3dulo, voc\u00ea deve import\u00e1-lo em seu script Python e instanciar a classe <code>GetPromptsFeedbackAndGraphics</code>. Voc\u00ea pode ent\u00e3o chamar os m\u00e9todos para gerar feedbacks e gr\u00e1ficos personalizados. A fun\u00e7\u00e3o <code>get_merge_prompt</code> pode ser usada para combinar os feedbacks em um texto \u00fanico, garantindo uma apresenta\u00e7\u00e3o clara e coerente das informa\u00e7\u00f5es.</p>"},{"location":"utils/prompts/#exemplo-de-uso","title":"Exemplo de Uso","text":"<pre><code>from utils import save_json_file\nfrom utils.prompts import GetPromptsFeedbackAndGraphics, get_merge_prompt\n\n# Criar uma inst\u00e2ncia da classe\nfeedback_generator = GetPromptsFeedbackAndGraphics(nome=\"Jo\u00e3o\", notas={\"competencia_1\": {\"nota\": 8, \"status\": \"ideal\"}}, data_nascimento=\"01/01/1990\")\n\n# Gerar o prompt de gr\u00e1ficos e notas\ngraphics_prompt = feedback_generator.get_graphics_and_score_prompt()\n\n# Gerar feedbacks\nfeedback_prompt = feedback_generator.get_feedbacks_prompt()\n\n# Unir feedbacks em um \u00fanico texto\nmerged_prompt, additional_section = get_merge_prompt(feedback_prompt, profession=\"Engenheiro\", sex=\"Masculino\", birthday=\"01/01/1990\")\n</code></pre>"},{"location":"utils/prompts/#conclusao","title":"Conclus\u00e3o","text":"<p>O m\u00f3dulo <code>prompts.py</code> \u00e9 uma ferramenta essencial para a personaliza\u00e7\u00e3o de feedbacks no contexto do teste MAPER, permitindo que usu\u00e1rios recebam informa\u00e7\u00f5es detalhadas e adaptadas ao seu desempenho. A integra\u00e7\u00e3o com arquivos JSON facilita a atualiza\u00e7\u00e3o e manuten\u00e7\u00e3o dos dados utilizados nos feedbacks.</p>"},{"location":"utils/utils-geral/","title":"Utils Geral","text":"<p>Este m\u00f3dulo cont\u00e9m diversas fun\u00e7\u00f5es utilit\u00e1rias para o projeto MAPER. Essas fun\u00e7\u00f5es s\u00e3o projetadas para facilitar o processamento de dados, a gera\u00e7\u00e3o de sa\u00eddas e a manipula\u00e7\u00e3o de arquivos. Os arquivos contendo fun\u00e7\u00f5es mais complexas ter\u00e3o um documento especif\u00edco.</p>"},{"location":"utils/utils-geral/#estrutura-do-modulo","title":"Estrutura do M\u00f3dulo","text":"<p>O m\u00f3dulo <code>utils</code> \u00e9 composto pelos seguintes arquivos:</p> <ul> <li>calcular_resutado_maper.py: Fun\u00e7\u00f5es para calcular resultados do teste MAPER.</li> <li>devolutive_plus_connection.py: Conex\u00f5es e manipula\u00e7\u00e3o de dados para devolutivas.</li> <li>gerar_pdf_saida_pdi.py: Gera\u00e7\u00e3o de arquivos PDF a partir de Planos de Desenvolvimento Individual (PDI).</li> <li>global_dict.py: Dicion\u00e1rios globais e vari\u00e1veis de configura\u00e7\u00e3o.</li> <li>prompts.py: Gera\u00e7\u00e3o de prompts para feedbacks e gr\u00e1ficos baseados em dados de testes.</li> <li>save_json_file.py: Fun\u00e7\u00f5es para salvar e abrir arquivos JSON.</li> </ul>"},{"location":"utils/utils-geral/#uso","title":"Uso","text":"<p>Cada arquivo no m\u00f3dulo <code>utils</code> cont\u00e9m fun\u00e7\u00f5es espec\u00edficas que podem ser importadas e utilizadas conforme necess\u00e1rio. Por exemplo:</p> <pre><code>from utils.calcular_resutado_maper import calcular_resultado\nfrom utils.save_json_file import save_json\n\n# Exemplo de uso\nresultado = calcular_resultado(dados)\nsave_json(\"resultado.json\", resultado)\n</code></pre>"}]}